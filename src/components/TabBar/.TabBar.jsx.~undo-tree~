"c660ea04e99e9e3cf08ac270f4013d14e6825d77"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#20=[nil nil ((#("
" 0 1 (fontified t)) . 833) (undo-tree-id1885 . 1) (undo-tree-id1886 . 1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (t 23394 926 947543 770000)) nil (23394 928 430248 0) 0 nil]) ((#("      " 0 6 (fontified t)) . -844) 864) nil (23394 926 934082 0) 0 nil]) ((844 . 864)) nil (23394 926 934087 0) 0 nil]) ((839 . 844)) nil (23394 926 934089 0) 0 nil]) ((#("      return string;" 0 6 (fontified t) 6 12 (font-lock-face font-lock-keyword-face fontified t) 12 20 (fontified t)) . 833) (undo-tree-id1869 . 20) (undo-tree-id1870 . 20) (undo-tree-id1871 . -6) (undo-tree-id1872 . -17) (undo-tree-id1873 . -17) (undo-tree-id1874 . -11) (undo-tree-id1875 . -11) (undo-tree-id1876 . -7) (undo-tree-id1877 . -7) (undo-tree-id1878 . -6) (undo-tree-id1879 . -6) (undo-tree-id1880 . -6) (undo-tree-id1881 . -20)) nil (23394 926 934110 0) 0 nil]) ((683 . 684)) nil (23394 926 934113 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 832) (undo-tree-id1882 . 1) (undo-tree-id1883 . 1) (undo-tree-id1884 . -1) (t 23394 765 442717 82000)) nil (23394 926 934117 0) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#("?" 0 1 (fontified t help-echo "invalid property id" cursor-sensor-functions #1=(js2-echo-error))) . -508) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (#("?" 0 1 (fontified t help-echo "invalid property id" cursor-sensor-functions #1#)) . -509) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) 510) ((508 . 510)) (23394 759 43130 0) 0 nil]) ((508 . 510)) ((#("??" 0 1 (fontified t help-echo "invalid property id" cursor-sensor-functions #1#) 1 2 (fontified t help-echo "invalid property id" cursor-sensor-functions #1#)) . 508) (undo-tree-id1847 . -2) (undo-tree-id1848 . -2) (undo-tree-id1849 . -1) (undo-tree-id1850 . -2) (undo-tree-id1851 . -1) (undo-tree-id1852 . -2)) (23394 759 43462 0) 0 nil]) ((#("*" 0 1 (fontified t)) . 439) (undo-tree-id1807 . -1) (#("/" 0 1 (fontified t font-lock-face font-lock-comment-face help-echo "unterminated comment" cursor-sensor-functions #1#)) . 439) (undo-tree-id1808 . -1)) ((439 . 440) (439 . 440)) (23394 759 387255 0) 0 nil]) ((#("p" 0 1 (fontified t font-lock-face font-lock-comment-face help-echo "unterminated comment" cursor-sensor-functions #1#)) . -506) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (#("p" 0 1 (fontified t font-lock-face font-lock-comment-face help-echo "unterminated comment" cursor-sensor-functions #1#)) . -507) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) 508) ((506 . 508)) (23394 759 755313 0) 0 nil]) ((506 . 508)) ((#("pp" 0 1 (fontified t font-lock-face font-lock-comment-face help-echo #2="unterminated comment" cursor-sensor-functions #1#) 1 2 (fontified t font-lock-face font-lock-comment-face help-echo #2# cursor-sensor-functions #1#)) . 506) (undo-tree-id1853 . -2) (undo-tree-id1854 . -2) (undo-tree-id1855 . -2)) (23394 760 280506 0) 0 nil]) ((#("*" 0 1 (fontified t font-lock-face font-lock-comment-face help-echo "unterminated comment" cursor-sensor-functions #1#)) . -506) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (#("/" 0 1 (fontified t font-lock-face font-lock-comment-face)) . -507) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) 508) ((506 . 508)) (23394 760 691295 0) 0 nil]) ((506 . 508)) ((#("*/" 0 1 (fontified t font-lock-face font-lock-comment-face) 1 2 (fontified t font-lock-face font-lock-comment-face)) . 506) (undo-tree-id1856 . -2) (undo-tree-id1857 . -2) (undo-tree-id1858 . -2) (undo-tree-id1859 . -2)) (23394 761 35244 0) 0 nil]) ((#("*" 0 1 (fontified t font-lock-face font-lock-comment-face help-echo "unterminated comment" cursor-sensor-functions #1#)) . -485) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (#("/" 0 1 (fontified t font-lock-face font-lock-comment-face)) . -486) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) 487) ((485 . 487)) (23394 761 564704 0) 0 nil]) ((485 . 487)) ((#("*/" 0 1 (fontified t font-lock-face font-lock-comment-face) 1 2 (fontified t font-lock-face font-lock-comment-face)) . 485) (undo-tree-id1860 . -2) (undo-tree-id1861 . -2) (undo-tree-id1862 . -2)) (23394 761 987139 0) 0 nil]) ((439 . 441)) ((#("/*" 0 1 (fontified t font-lock-face font-lock-comment-face help-echo #3="unterminated comment" cursor-sensor-functions #1#) 1 2 (fontified t font-lock-face font-lock-comment-face help-echo #3# cursor-sensor-functions #1#)) . 439) (undo-tree-id1863 . -1) (undo-tree-id1864 . -2)) (23394 762 291251 0) 0 nil]) ((#("/" 0 1 (fontified nil font-lock-face font-lock-comment-face)) . -400) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (#("/" 0 1 (fontified t font-lock-face font-lock-comment-face)) . -401) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) 402) ((400 . 402)) (23394 762 595062 0) 0 nil]) ((400 . 402) (t 23394 598 175348 851000)) ((#("//" 0 1 (fontified t font-lock-face font-lock-comment-face) 1 2 (fontified t font-lock-face font-lock-comment-face)) . 400) (undo-tree-id1865 . -2) (undo-tree-id1866 . -2) (undo-tree-id1867 . -2) (undo-tree-id1868 . -2)) (23394 762 811211 0) 0 nil]) ((400 . 402) (t 23394 575 557531 887000)) ((#("//" 0 1 (fontified t font-lock-face font-lock-comment-face) 1 2 (fontified t font-lock-face font-lock-comment-face)) . 400) (t 23394 598 175348 851000)) (23394 763 292313 0) 0 nil]) ((#("extends " 0 7 (fontified t font-lock-face font-lock-keyword-face help-echo "name is required after extends" cursor-sensor-functions #1#) 7 8 (fontified t)) . -373) (undo-tree-id1513 . -8) (undo-tree-id1514 . -8) (undo-tree-id1515 . -8) (undo-tree-id1517 . -1) (undo-tree-id1519 . 7) (undo-tree-id1521 . 5) (undo-tree-id1523 . -3) (undo-tree-id1525 . 5) (undo-tree-id1527 . 4) (undo-tree-id1529 . -4) (undo-tree-id1531 . -8) (undo-tree-id1533 . -8) (undo-tree-id1535 . -8) (undo-tree-id1537 . -8) (undo-tree-id1539 . -8) (undo-tree-id1541 . -8) (undo-tree-id1543 . -8) (undo-tree-id1545 . -8) (undo-tree-id1547 . -8) (undo-tree-id1549 . -8) (undo-tree-id1551 . -8) (undo-tree-id1553 . -8) (undo-tree-id1555 . 1) (undo-tree-id1557 . 2) (undo-tree-id1559 . -6) (undo-tree-id1561 . 2) (undo-tree-id1563 . 4) (undo-tree-id1565 . -4) (undo-tree-id1567 . 4) (undo-tree-id1569 . 6) (undo-tree-id1571 . -2) (undo-tree-id1573 . 6) (undo-tree-id1575 . 7) (undo-tree-id1577 . -1) (undo-tree-id1579 . 8) (undo-tree-id1581 . 8) (undo-tree-id1583 . 6) (undo-tree-id1585 . -2) (undo-tree-id1587 . 6) (undo-tree-id1589 . 4) (undo-tree-id1591 . -4) (undo-tree-id1593 . 4) (undo-tree-id1595 . 2) (undo-tree-id1597 . -6) (undo-tree-id1599 . 2) (undo-tree-id1601 . 1) (undo-tree-id1603 . -8) (undo-tree-id1605 . -8) (undo-tree-id1607 . -8) (undo-tree-id1609 . -8) (undo-tree-id1611 . -8) (undo-tree-id1613 . -8) (undo-tree-id1615 . -7) (undo-tree-id1617 . 5) (undo-tree-id1619 . 5) (undo-tree-id1621 . -3) (undo-tree-id1623 . 5) (undo-tree-id1625 . 1) (undo-tree-id1627 . -7) (undo-tree-id1629 . -8) (undo-tree-id1631 . -8) (undo-tree-id1633 . -8) (undo-tree-id1635 . -8) (undo-tree-id1637 . -8) (undo-tree-id1639 . -8) (undo-tree-id1640 . -8) (undo-tree-id1642 . -8) (undo-tree-id1644 . -8) (undo-tree-id1646 . -8) 381) ((373 . 381)) (23394 763 667483 0) 0 nil]) ((#("Component" 0 9 (fontified t)) . -381) (undo-tree-id1647 . -9) (undo-tree-id1648 . -9) (undo-tree-id1649 . -9) (undo-tree-id1651 . -3) (undo-tree-id1653 . 6) (undo-tree-id1655 . 6) (undo-tree-id1657 . -9) (undo-tree-id1659 . -4) (undo-tree-id1661 . 5) (undo-tree-id1663 . 5) (undo-tree-id1665 . -9) (undo-tree-id1667 . -3) (undo-tree-id1669 . 6) (undo-tree-id1671 . 6) (undo-tree-id1673 . -9) (undo-tree-id1675 . -6) (undo-tree-id1677 . 3) (undo-tree-id1679 . 3) (undo-tree-id1681 . -6) (undo-tree-id1683 . -9) (undo-tree-id1685 . -9) (undo-tree-id1687 . -8) (undo-tree-id1689 . 1) (undo-tree-id1691 . 3) (undo-tree-id1693 . -6) (undo-tree-id1695 . 3) (undo-tree-id1697 . 7) (undo-tree-id1699 . -2) (undo-tree-id1701 . 7) (undo-tree-id1703 . 9) (undo-tree-id1705 . 9) (undo-tree-id1707 . 7) (undo-tree-id1709 . -2) (undo-tree-id1711 . 7) (undo-tree-id1713 . 5) (undo-tree-id1715 . -4) (undo-tree-id1717 . 5) (undo-tree-id1719 . 5) (undo-tree-id1721 . -4) (undo-tree-id1723 . 5) (undo-tree-id1725 . 7) (undo-tree-id1727 . -2) (undo-tree-id1729 . 7) (undo-tree-id1731 . 9) (undo-tree-id1733 . 9) (undo-tree-id1735 . 9) (undo-tree-id1737 . -3) (undo-tree-id1739 . 6) (undo-tree-id1741 . 6) (undo-tree-id1743 . -3) (undo-tree-id1745 . -9) (undo-tree-id1747 . 4) (undo-tree-id1749 . 4) (undo-tree-id1751 . -5) (undo-tree-id1753 . -9) (undo-tree-id1755 . -9) (undo-tree-id1757 . -9) (undo-tree-id1759 . -9) 390) ((381 . 390)) (23394 763 987114 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -877) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . 1) (undo-tree-id1765 . 1) (undo-tree-id1766 . 1) (undo-tree-id1767 . 1) (undo-tree-id1768 . 1) (undo-tree-id1769 . 1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . 1) (undo-tree-id1774 . 1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) 878) nil (23394 764 379111 0) 0 nil]) ((1814 . 1820) 1815) nil (23394 575 518901 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1560) (undo-tree-id1779 . 1) (undo-tree-id1780 . 1) (undo-tree-id1781 . 1) (undo-tree-id1782 . 1) (undo-tree-id1783 . 1) (undo-tree-id1784 . 1) (undo-tree-id1785 . 1) (undo-tree-id1786 . 1) (undo-tree-id1787 . 1) (undo-tree-id1788 . 1) (undo-tree-id1789 . 1) (undo-tree-id1790 . 1) (undo-tree-id1791 . 1) (undo-tree-id1792 . 1) (undo-tree-id1793 . 1) (undo-tree-id1794 . -1) (t 23393 65356 794064 169000)) nil (23394 575 518923 0) 0 nil]) ((#("      " 0 6 (fontified t)) . -510) (undo-tree-id1468 . 6) 506) nil (23393 65356 765087 0) 0 nil]) ((510 . 525)) nil (23393 65356 765093 0) 0 nil]) ((505 . 510)) nil (23393 65356 765095 0) 0 nil]) ((#("      debugger;" 0 6 (fontified t) 6 14 (fontified t font-lock-face font-lock-keyword-face) 14 15 (fontified t)) . 818) (undo-tree-id1469 . -15) (undo-tree-id1470 . -6) (undo-tree-id1471 . 9) (undo-tree-id1472 . -7) (undo-tree-id1473 . -7) (undo-tree-id1474 . -7) (undo-tree-id1475 . 8) (undo-tree-id1476 . -8) (undo-tree-id1477 . -8) (undo-tree-id1478 . -8) (undo-tree-id1479 . -8) (undo-tree-id1480 . -8) (undo-tree-id1481 . -8) (undo-tree-id1482 . -8) (undo-tree-id1483 . -8) (undo-tree-id1484 . -8) (undo-tree-id1485 . -8) (undo-tree-id1486 . -8) (undo-tree-id1487 . -8) (undo-tree-id1488 . -8) (undo-tree-id1489 . -8) (undo-tree-id1490 . -8) (undo-tree-id1491 . -8) (undo-tree-id1492 . -8) (undo-tree-id1493 . 7) (undo-tree-id1494 . -9) (undo-tree-id1495 . 6) (undo-tree-id1496 . -10) (undo-tree-id1497 . 5) (undo-tree-id1498 . -11) (undo-tree-id1499 . 4) (undo-tree-id1500 . -12) (undo-tree-id1501 . 3) (undo-tree-id1502 . -13) (undo-tree-id1503 . 2) (undo-tree-id1504 . -14) (undo-tree-id1505 . 1) (undo-tree-id1506 . -15) (undo-tree-id1507 . -15) (undo-tree-id1508 . -15) (undo-tree-id1509 . -15) (undo-tree-id1510 . -15) (undo-tree-id1511 . 15) (undo-tree-id1512 . -15) (t 23393 65322 575826 653000)) nil (23393 65356 765154 0) 0 nil]) ((2430 . 2431) (t 23393 65320 598017 598000)) nil (23393 65322 547995 0) 0 nil]) ((#("  " 0 2 (fontified nil)) . -2429) (undo-tree-id1464 . -2) (undo-tree-id1465 . -2) (undo-tree-id1466 . -2) (undo-tree-id1467 . -2) (2431 . 2432) (#("}" 0 1 (fontified nil)) . -2431) (2431 . 2432)) nil (23393 65320 570361 0) 0 nil]) ((2428 . 2431)) nil (23393 65320 570366 0) 0 nil]) ((2427 . 2428) (t 23393 65308 665258 273000)) nil (23393 65320 570368 0) 0 nil]) ((" " . -2427) (undo-tree-id1376 . 1) (undo-tree-id1377 . -1) 833) nil (23393 65308 636550 0) 0 nil]) ((826 . 833)) nil (23393 65308 636554 0) 0 nil]) ((#("b" 0 1 (fontified t help-echo "missing ; after statement" cursor-sensor-functions #1#)) . -826) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . 1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (#("u" 0 1 (fontified t help-echo "missing ; after statement" cursor-sensor-functions #1#)) . -827) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . 1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (#("g" 0 1 (fontified t help-echo "missing ; after statement" cursor-sensor-functions #1#)) . -828) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . 1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (#("g" 0 1 (fontified t help-echo "missing ; after statement" cursor-sensor-functions #1#)) . -829) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . 1) (undo-tree-id1417 . -1) 830) nil (23393 65308 636638 0) 0 nil]) ((826 . 830)) nil (23393 65308 636644 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -826) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . 1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (#("b" 0 1 (fontified t help-echo "missing ; before statement" cursor-sensor-functions #1#)) . -827) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . 1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (#("u" 0 1 (fontified t help-echo "missing ; before statement" cursor-sensor-functions #1#)) . -828) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . 1) (undo-tree-id1443 . -1) 829) nil (23393 65308 636691 0) 0 nil]) ((826 . 829)) nil (23393 65308 636695 0) 0 nil]) ((#("g" 0 1 (fontified t help-echo "missing ; after statement" cursor-sensor-functions #1#)) . -826) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . 1) (undo-tree-id1450 . -1) 827) nil (23393 65308 636706 0) 0 nil]) ((825 . 827)) nil (23393 65308 636709 0) 0 nil]) ((#("u" 0 1 (fontified t help-echo "missing ; after statement" cursor-sensor-functions #1#)) . -825) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . 1) (undo-tree-id1457 . -1) 826) nil (23393 65308 636720 0) 0 nil]) ((824 . 826)) nil (23393 65308 636723 0) 0 nil]) ((817 . 824)) nil (23393 65308 636724 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -862) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) 863) nil (23393 65308 636734 0) 0 nil]) ((2402 . 2413)) nil (23393 65308 636736 0) 0 nil]) ((2399 . 2402)) nil (23393 65308 636738 0) 0 nil]) ((2377 . 2382)) nil (23393 65308 636739 0) 0 nil]) ((#("oast" 0 4 (fontified t help-echo "Undeclared variable or function 'Toast'" cursor-sensor-functions #1#)) . 2377)) nil (23393 65308 636741 0) 0 nil]) ((nil rear-nonsticky nil 2397 . 2398) (2376 . 2398)) nil (23393 65308 636742 0) 0 nil]) ((2375 . 2376) (t 23393 61658 184981 157000)) nil (23393 65308 636744 0) 0 nil]) ((2440 . 2441) 2438) nil (23393 61658 163731 0) 0 nil]) ((2432 . 2438)) nil (23393 61658 163741 0) 0 nil]) ((#("t" 0 1 (fontified t help-echo "Undeclared variable or function 't'" cursor-sensor-functions #1#)) . -2432) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . 1) (undo-tree-id1145 . -1) 2433) nil (23393 61658 163778 0) 0 nil]) ((2432 . 2433)) nil (23393 61658 163782 0) 0 nil]) ((#("PathView" 0 8 (fontified t help-echo "Undeclared variable or function 'PathView'" cursor-sensor-functions #1#)) . -2432) (undo-tree-id1146 . -8) (undo-tree-id1147 . -8) (undo-tree-id1148 . -8) (undo-tree-id1149 . -8) 2440) nil (23393 61658 163788 0) 0 nil]) ((#("withStyles(" 0 10 (fontified t font-lock-face js2-function-call) 10 11 (fontified t face (rainbow-delimiters-depth-1-face))) . -2391) (undo-tree-id1150 . -11) (undo-tree-id1151 . -11) (undo-tree-id1152 . -11) (undo-tree-id1153 . -11) (undo-tree-id1154 . -11) (undo-tree-id1155 . -11) (undo-tree-id1156 . -11) (undo-tree-id1157 . -11) (undo-tree-id1158 . -11) (undo-tree-id1159 . -11) (undo-tree-id1160 . -11) (undo-tree-id1161 . -11) (undo-tree-id1162 . -11) (undo-tree-id1163 . -11) (undo-tree-id1164 . -11) (undo-tree-id1165 . -11) (undo-tree-id1166 . -11) (undo-tree-id1167 . -11) (undo-tree-id1168 . -11) (undo-tree-id1169 . -11) (undo-tree-id1170 . -11) (undo-tree-id1171 . -11) (undo-tree-id1172 . -11) (undo-tree-id1173 . -11) (undo-tree-id1174 . -11) (undo-tree-id1175 . -11) (undo-tree-id1176 . -11) (undo-tree-id1177 . -11) (undo-tree-id1178 . -11) (undo-tree-id1179 . -11) (undo-tree-id1180 . -11) (undo-tree-id1181 . -11) (undo-tree-id1182 . -11) (undo-tree-id1183 . 11) (undo-tree-id1184 . -1) (undo-tree-id1185 . 10) (undo-tree-id1186 . -2) (undo-tree-id1187 . 9) (undo-tree-id1188 . -3) (undo-tree-id1189 . 8) (undo-tree-id1190 . -4) (undo-tree-id1191 . 7) (undo-tree-id1192 . -5) (undo-tree-id1193 . 6) (undo-tree-id1194 . -6) (undo-tree-id1195 . 5) (undo-tree-id1196 . -7) (undo-tree-id1197 . 4) (undo-tree-id1198 . -8) (undo-tree-id1199 . 3) (undo-tree-id1200 . -9) (undo-tree-id1201 . -9) (undo-tree-id1202 . -9) (undo-tree-id1203 . 1) (undo-tree-id1204 . -11) (undo-tree-id1205 . -11) (undo-tree-id1206 . -11) (undo-tree-id1207 . -11) (undo-tree-id1208 . -11) (undo-tree-id1209 . -11) (undo-tree-id1210 . -11) (undo-tree-id1211 . -11) (undo-tree-id1212 . -11) (undo-tree-id1213 . -11) (undo-tree-id1214 . -11) (undo-tree-id1215 . -11) (undo-tree-id1216 . 1) (undo-tree-id1217 . -9) (undo-tree-id1218 . 1) (undo-tree-id1219 . 2) (undo-tree-id1220 . -10) (undo-tree-id1221 . 1) (undo-tree-id1222 . 1) (undo-tree-id1223 . -10) (undo-tree-id1224 . 1) (undo-tree-id1225 . 1) (undo-tree-id1226 . -10) (undo-tree-id1227 . 1) (undo-tree-id1228 . 1) (undo-tree-id1229 . -10) (undo-tree-id1230 . 1) (undo-tree-id1231 . 1) (undo-tree-id1232 . -10) (undo-tree-id1233 . -11) (undo-tree-id1234 . -11) (undo-tree-id1235 . -11) (undo-tree-id1236 . -11) (undo-tree-id1237 . -11) (undo-tree-id1238 . -11) (undo-tree-id1239 . -11) 2402) nil (23393 61658 163929 0) 0 nil]) ((#("TabBar);" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-1-face)) 7 8 (fontified t)) . -2402) (undo-tree-id1240 . -8) (undo-tree-id1241 . -8) (undo-tree-id1242 . -8) (undo-tree-id1243 . -8) (undo-tree-id1244 . -8) (undo-tree-id1245 . -8) (undo-tree-id1246 . -8) (undo-tree-id1247 . -8) (undo-tree-id1248 . -8) (undo-tree-id1249 . -8) (undo-tree-id1250 . -8) (undo-tree-id1251 . -8) (undo-tree-id1252 . -8) (undo-tree-id1253 . -8) (undo-tree-id1254 . -8) (undo-tree-id1255 . -8) (undo-tree-id1256 . -8) (undo-tree-id1257 . -8) (undo-tree-id1258 . -8) (undo-tree-id1259 . -8) (undo-tree-id1260 . -8) (undo-tree-id1261 . -8) (undo-tree-id1262 . -8) (undo-tree-id1263 . -8) (undo-tree-id1264 . -8) (undo-tree-id1265 . -8) (undo-tree-id1266 . -8) (undo-tree-id1267 . -8) (undo-tree-id1268 . -8) (undo-tree-id1269 . -8) (undo-tree-id1270 . -8) (undo-tree-id1271 . 7) (undo-tree-id1272 . -1) (undo-tree-id1273 . 7) (undo-tree-id1274 . 7) (undo-tree-id1275 . -1) (undo-tree-id1276 . 8) (undo-tree-id1277 . 7) (undo-tree-id1278 . 8) (undo-tree-id1279 . 8) (undo-tree-id1280 . 8) (undo-tree-id1281 . 8) (undo-tree-id1282 . 8) (undo-tree-id1283 . 8) (undo-tree-id1284 . 8) (undo-tree-id1285 . 8) (undo-tree-id1286 . 8) (undo-tree-id1287 . 8) (undo-tree-id1288 . 8) (undo-tree-id1289 . 8) (undo-tree-id1290 . 8) (undo-tree-id1291 . 8) (undo-tree-id1292 . 8) (undo-tree-id1293 . 8) (undo-tree-id1294 . 8) (undo-tree-id1295 . 8) (undo-tree-id1296 . 8) (undo-tree-id1297 . -8) (undo-tree-id1298 . 1) (undo-tree-id1299 . -6) (undo-tree-id1300 . 1) (undo-tree-id1301 . 2) (undo-tree-id1302 . -7) (undo-tree-id1303 . 2) (undo-tree-id1304 . 1) (undo-tree-id1305 . -6) (undo-tree-id1306 . 3) (undo-tree-id1307 . 2) (undo-tree-id1308 . -5) (undo-tree-id1309 . 4) (undo-tree-id1310 . 3) (undo-tree-id1311 . -4) (undo-tree-id1312 . 5) (undo-tree-id1313 . 4) (undo-tree-id1314 . -3) (undo-tree-id1315 . 6) (undo-tree-id1316 . 5) (undo-tree-id1317 . -2) (undo-tree-id1318 . 7) (undo-tree-id1319 . 6) (undo-tree-id1320 . -1) (undo-tree-id1321 . 8) (undo-tree-id1322 . 7) (undo-tree-id1323 . 8) (undo-tree-id1324 . -8) (undo-tree-id1325 . -8) (undo-tree-id1326 . -8) (undo-tree-id1327 . -8) (undo-tree-id1328 . -8) (undo-tree-id1329 . -8) 2410) nil (23393 61658 164052 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -2410) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . 1) (undo-tree-id1337 . 1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . 1) (undo-tree-id1362 . 1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) 2411) nil (23393 61658 164097 0) 0 nil]) ((2411 . 2462)) nil (23393 61658 164101 0) 0 nil]) ((#(")" 0 1 (fontified t help-echo "missing ; before statement" cursor-sensor-functions #1# face (rainbow-delimiters-unmatched-face))) . -2401) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . 1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . 1) (undo-tree-id1375 . -1) 2402) nil (23393 61658 164115 0) 0 nil]) ((2401 . 2402) (#(")" 0 1 (fontified nil font-lock-face js2-function-call)) . -2401) (2401 . 2402) (t 23393 61587 437990 457000)) nil (23393 61658 164118 0) 0 nil]) ((2400 . 2401)) nil (23393 61587 416244 0) 0 nil]) ((2407 . 2408) (#(")" 0 1 (fontified nil)) . -2407) (2407 . 2408)) nil (23393 61587 416250 0) 0 nil]) ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 2401) (undo-tree-id1124 . -1) (undo-tree-id1125 . 1)) nil (23393 61587 416260 0) 0 nil]) ((2400 . 2402) (#("(" 0 1 (fontified nil help-echo "Undeclared variable or function 'withStyleTabBar'" cursor-sensor-functions #1#)) . -2400) (2400 . 2401)) nil (23393 61587 416263 0) 0 nil]) ((#("9" 0 1 (fontified t help-echo "Undeclared variable or function 'withStyle9TabBar'" cursor-sensor-functions #1#)) . -2400) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . 1) (undo-tree-id1129 . -1) 2401) nil (23393 61587 416268 0) 0 nil]) ((2391 . 2401)) nil (23393 61587 416270 0) 0 nil]) ((#("e" 0 1 (font-lock-face font-lock-string-face help-echo "missing ; after statement" cursor-sensor-functions #1# fontified t)) . -1781) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) 1782) nil (23393 61587 416281 0) 0 nil]) ((1707 . 1708)) nil (23393 61587 416284 0) 0 nil]) ((#("1" 0 1 (fontified t font-lock-face js2-object-property-access)) . -1707) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) 1708) nil (23393 61587 416290 0) 0 nil] [nil nil ((#("=" 0 1 (fontified t)) . 1690) (undo-tree-id1092 . 1) (undo-tree-id1093 . 1) (undo-tree-id1094 . 1) (undo-tree-id1095 . 1)) ((1690 . 1691)) (23393 61547 222771 0) 0 nil]) ((1689 . 1690)) nil (23393 61547 223241 0) 0 nil]) ((#("1" 0 1 (fontified t font-lock-face rjsx-attr)) . 1689) (undo-tree-id1096 . 1) (undo-tree-id1097 . -1)) nil (23393 61547 222786 0) 0 nil]) ((#("                            " 0 28 (fontified t)) . -1688) (undo-tree-id1098 . -28) (undo-tree-id1099 . -28) (undo-tree-id1100 . 28) (undo-tree-id1101 . -28) (undo-tree-id1102 . -28) 1716) nil (23393 61547 222803 0) 0 nil]) ((nil rear-nonsticky nil 1737 . 1738) (1688 . 1738) (#("x2$=\"[[_rightStringX]]\"" 0 3 (font-lock-face rjsx-attr fontified t) 3 4 (fontified t) 4 5 (font-lock-face font-lock-string-face fontified t) 5 6 (font-lock-face font-lock-string-face fontified t) 6 7 (font-lock-face font-lock-string-face fontified t) 7 8 (font-lock-face font-lock-string-face fontified t) 8 20 (font-lock-face font-lock-string-face fontified t) 20 21 (font-lock-face font-lock-string-face fontified t) 21 22 (font-lock-face font-lock-string-face fontified t) 22 23 (font-lock-face font-lock-string-face fontified t)) . -1688) (undo-tree-id1103 . -23) (undo-tree-id1104 . -23) (undo-tree-id1105 . 23) (undo-tree-id1106 . -23) 1711) nil (23393 61547 222816 0) 0 nil]) ((1688 . 1711)) nil (23393 61547 222819 0) 0 nil]) ((#("x2$=\"[[_" 0 3 (fontified t font-lock-face rjsx-attr) 3 4 (fontified t) 4 5 (fontified t font-lock-face font-lock-string-face help-echo "unterminated string literal" cursor-sensor-functions #1#) 5 6 (fontified t font-lock-face font-lock-string-face help-echo #4="invalid JSX string (cannot contain delimiter in string body)" cursor-sensor-functions #1#) 6 7 (fontified t font-lock-face font-lock-string-face help-echo #4# cursor-sensor-functions #1#) 7 8 (fontified t font-lock-face font-lock-string-face help-echo #4# cursor-sensor-functions #1#)) . -1688) (undo-tree-id1107 . -8) (undo-tree-id1108 . -8) (undo-tree-id1109 . -8) (undo-tree-id1110 . -8) (undo-tree-id1111 . -8) (undo-tree-id1112 . -8) (undo-tree-id1113 . -4) (undo-tree-id1114 . -8) (undo-tree-id1115 . -4) (undo-tree-id1116 . -5) (undo-tree-id1117 . -8) 1696) nil (23393 61547 222839 0) 0 nil]) ((#("rightStringX]]\"" 0 12 (fontified t font-lock-face font-lock-string-face) 12 13 (fontified t font-lock-face font-lock-string-face) 13 14 (fontified t font-lock-face font-lock-string-face) 14 15 (fontified t font-lock-face font-lock-string-face)) . -1696) (undo-tree-id1118 . -15) (undo-tree-id1119 . -15) (undo-tree-id1120 . -15) (undo-tree-id1121 . -15) (undo-tree-id1122 . -15) (undo-tree-id1123 . -15) 1711) nil (23393 61547 222855 0) 0 nil] [nil nil ((#("                            x1={string[number.x1]}" 0 28 (fontified t) 28 30 (fontified t font-lock-face rjsx-attr) 30 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-8-face)) 32 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-9-face)) 39 45 (fontified t) 45 46 (fontified t) 46 48 (fontified t font-lock-face js2-object-property-access) 48 49 (fontified t face (rainbow-delimiters-depth-9-face)) 49 50 (fontified t face (rainbow-delimiters-depth-8-face))) . 1637) (undo-tree-id925 . -50) (undo-tree-id926 . -50) (undo-tree-id927 . -28) (undo-tree-id928 . -28) (undo-tree-id929 . -28) (undo-tree-id930 . -28) (undo-tree-id931 . 50) (undo-tree-id932 . 50) (undo-tree-id933 . 50) (undo-tree-id934 . 50) (undo-tree-id935 . 50) (undo-tree-id936 . 50) (undo-tree-id937 . 50) (undo-tree-id938 . 50) (undo-tree-id939 . -28) (undo-tree-id940 . -28) (undo-tree-id941 . -28) (undo-tree-id942 . -28) (undo-tree-id943 . -28) (undo-tree-id944 . -28) (undo-tree-id945 . -28) (undo-tree-id946 . -28) (undo-tree-id947 . -28) (undo-tree-id948 . -28) (undo-tree-id949 . -28) (undo-tree-id950 . 22) (undo-tree-id951 . -31) (undo-tree-id952 . -31) (undo-tree-id953 . -31) (undo-tree-id954 . -31) (undo-tree-id955 . 20) (undo-tree-id956 . -30) (undo-tree-id957 . 20) (undo-tree-id958 . 20) (undo-tree-id959 . -30) (undo-tree-id960 . 20) (undo-tree-id961 . 50) (undo-tree-id962 . 20) (undo-tree-id963 . 50) (undo-tree-id964 . -30) (undo-tree-id965 . 20) (undo-tree-id966 . -31) (undo-tree-id967 . 1) (undo-tree-id968 . 19) (undo-tree-id969 . -32) (undo-tree-id970 . 1) (undo-tree-id971 . 18) (undo-tree-id972 . -33) (undo-tree-id973 . 1) (undo-tree-id974 . 17) (undo-tree-id975 . -34) (undo-tree-id976 . 1) (undo-tree-id977 . 1) (undo-tree-id978 . -34) (undo-tree-id979 . 1) (undo-tree-id980 . 1) (undo-tree-id981 . -34) (undo-tree-id982 . 1) (undo-tree-id983 . 16) (undo-tree-id984 . -35) (undo-tree-id985 . 1) (undo-tree-id986 . 15) (undo-tree-id987 . -36) (undo-tree-id988 . 1) (undo-tree-id989 . 14) (undo-tree-id990 . -37) (undo-tree-id991 . 1) (undo-tree-id992 . 13) (undo-tree-id993 . -38) (undo-tree-id994 . 1) (undo-tree-id995 . 1) (undo-tree-id996 . -38) (undo-tree-id997 . 1) (undo-tree-id998 . 1) (undo-tree-id999 . -38) (undo-tree-id1000 . 2) (undo-tree-id1001 . 12) (undo-tree-id1002 . -39) (undo-tree-id1003 . 2) (undo-tree-id1004 . 11) (undo-tree-id1005 . -40) (undo-tree-id1006 . 2) (undo-tree-id1007 . 10) (undo-tree-id1008 . -41) (undo-tree-id1009 . 2) (undo-tree-id1010 . 9) (undo-tree-id1011 . -42) (undo-tree-id1012 . 2) (undo-tree-id1013 . 8) (undo-tree-id1014 . -43) (undo-tree-id1015 . 2) (undo-tree-id1016 . 7) (undo-tree-id1017 . -44) (undo-tree-id1018 . 2) (undo-tree-id1019 . 6) (undo-tree-id1020 . -45) (undo-tree-id1021 . 2) (undo-tree-id1022 . 5) (undo-tree-id1023 . -46) (undo-tree-id1024 . 2) (undo-tree-id1025 . 4) (undo-tree-id1026 . -47) (undo-tree-id1027 . 2) (undo-tree-id1028 . 3) (undo-tree-id1029 . -48) (undo-tree-id1030 . 1) (undo-tree-id1031 . 2) (undo-tree-id1032 . -49) (undo-tree-id1033 . 1) (undo-tree-id1034 . -50) (undo-tree-id1035 . -50) (undo-tree-id1036 . -50) (undo-tree-id1037 . 50)) ((1637 . 1687)) (23393 61537 553812 0) 0 nil]) ((1676 . 1685) (1675 . 1677) (#("[" 0 1 (fontified nil)) . -1675) (1675 . 1676)) nil (23393 61537 554317 0) 0 nil]) ((#("p" 0 1 (fontified t help-echo "Undeclared variable or function 'stringp'" cursor-sensor-functions #1#)) . -1675) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . 1) (undo-tree-id1042 . -1) 1676) nil (23393 61537 553837 0) 0 nil]) ((1671 . 1676)) nil (23393 61537 553840 0) 0 nil]) ((#("i" 0 1 (fontified t help-echo "Undeclared variable or function 'sti'" cursor-sensor-functions #1#)) . -1671) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . 1) (undo-tree-id1047 . -1) 1672) nil (23393 61537 553847 0) 0 nil]) ((1669 . 1672)) nil (23393 61537 553850 0) 0 nil]) ((1668 . 1670) (#("{" 0 1 (fontified nil help-echo "missing value after prop `x1'" cursor-sensor-functions #1#)) . -1668) (1668 . 1669)) nil (23393 61537 553852 0) 0 nil]) ((#("$" 0 1 (fontified t font-lock-face rjsx-attr help-echo "missing value after prop `x1$'" cursor-sensor-functions #1#)) . -1667) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) 1668) nil (23393 61537 553858 0) 0 nil]) ((#("\"" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1669) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (#("\"" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1670) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . 1) (undo-tree-id1061 . 1) (undo-tree-id1062 . 1) (undo-tree-id1063 . 1) (undo-tree-id1064 . 1) (undo-tree-id1065 . 1) (undo-tree-id1066 . 1) (undo-tree-id1067 . 1) (undo-tree-id1068 . 1) (undo-tree-id1069 . 1) (undo-tree-id1070 . 1) (undo-tree-id1071 . 1) (undo-tree-id1072 . 1) (undo-tree-id1073 . 1) (undo-tree-id1074 . 1) (undo-tree-id1075 . 1) (undo-tree-id1076 . 1) (undo-tree-id1077 . 1) (undo-tree-id1078 . 1) (undo-tree-id1079 . 1) (undo-tree-id1080 . 1) (undo-tree-id1081 . 1) (undo-tree-id1082 . 1) (undo-tree-id1083 . 1) (undo-tree-id1084 . 1) (undo-tree-id1085 . 1) (undo-tree-id1086 . 1) (undo-tree-id1087 . 1) (undo-tree-id1088 . 1) (undo-tree-id1089 . 1) (undo-tree-id1090 . 1) (undo-tree-id1091 . -1) 1671) nil (23393 61537 553945 0) 0 nil] [nil nil ((#("x1$=\"" 0 3 (fontified t font-lock-face rjsx-attr) 3 4 (fontified t) 4 5 (fontified t font-lock-face font-lock-string-face)) . -1665) (undo-tree-id835 . -5) (undo-tree-id836 . -5) (undo-tree-id837 . -5) (undo-tree-id838 . 3) (undo-tree-id839 . -2) (undo-tree-id840 . 3) (undo-tree-id841 . 3) (undo-tree-id842 . -2) (undo-tree-id843 . 3) (undo-tree-id844 . 3) (undo-tree-id845 . -2) (undo-tree-id846 . 3) (undo-tree-id847 . -5) (undo-tree-id848 . 3) (undo-tree-id849 . -2) (undo-tree-id850 . 3) (undo-tree-id851 . -5) (undo-tree-id852 . -5) (undo-tree-id853 . -5) (undo-tree-id854 . -5) (undo-tree-id855 . -5) (undo-tree-id856 . -5) (undo-tree-id857 . -5) (undo-tree-id858 . -5) (undo-tree-id859 . -5) 1670) ((1665 . 1670)) (23393 61515 722617 0) 0 nil]) ((#("[" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1670) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (#("[" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1671) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (#("_" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1672) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (#("]" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1673) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . 1) (undo-tree-id896 . 1) (undo-tree-id897 . 1) (undo-tree-id898 . 1) (undo-tree-id899 . 1) (undo-tree-id900 . 1) (undo-tree-id901 . 1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (#("]" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1674) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . 1) (undo-tree-id909 . 1) (undo-tree-id910 . -1) (undo-tree-id911 . 1) (undo-tree-id912 . -1) 1675) nil (23393 61515 722942 0) 0 nil]) ((#("rightStringX" 0 12 (fontified t font-lock-face font-lock-string-face)) . -1673) (undo-tree-id913 . -12) (undo-tree-id914 . -12) (undo-tree-id915 . 10) (undo-tree-id916 . -2) (undo-tree-id917 . 10) (undo-tree-id918 . -12) (undo-tree-id919 . -12) 1685) nil (23393 61515 722694 0) 0 nil]) ((#("e" 0 1 (fontified t font-lock-face rjsx-attr)) . -1637) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . 1) (undo-tree-id924 . -1) 1638) nil (23393 61515 722701 0) 0 nil]) ((1637 . 1638) (t 23393 61506 143537 485000)) nil (23393 61515 722703 0) 0 nil]) ((#("                  " 0 18 (fontified t)) . -1787) (undo-tree-id751 . 18) (undo-tree-id752 . -18) (undo-tree-id753 . -18) (undo-tree-id754 . -18) (undo-tree-id755 . 18) (undo-tree-id756 . 18) (undo-tree-id757 . 18) (undo-tree-id758 . 18) (undo-tree-id759 . 18) (undo-tree-id760 . 18) (undo-tree-id761 . 18) (#("                  " 0 18 (fontified t)) . -1546) (undo-tree-id762 . 18) (undo-tree-id763 . -18) 1654) nil (23393 61506 126068 0) 0 nil]) ((nil rear-nonsticky nil 1653 . 1654) (1636 . 1654) (#("bottomFretY]]\"" 0 11 (font-lock-face rjsx-attr fontified t) 11 12 (help-echo "invalid JSX identifier" cursor-sensor-functions #1# fontified t face (rainbow-delimiters-mismatched-face)) 12 13 (help-echo "invalid JSX identifier" cursor-sensor-functions #1# fontified t face (rainbow-delimiters-mismatched-face)) 13 14 (font-lock-face font-lock-string-face help-echo "unterminated string literal" cursor-sensor-functions #1# fontified t)) . -1636) (undo-tree-id764 . -14) (undo-tree-id765 . -14) (undo-tree-id766 . -13) (undo-tree-id767 . -14) (undo-tree-id768 . -13) (undo-tree-id769 . -14) (undo-tree-id770 . -12) (undo-tree-id771 . -13) (undo-tree-id772 . -11) (undo-tree-id773 . -12) (undo-tree-id774 . 14) (undo-tree-id775 . -14) 1650) nil (23393 61506 126088 0) 0 nil]) ((1636 . 1650)) nil (23393 61506 126101 0) 0 nil]) ((#("\"" 0 1 (fontified t font-lock-face font-lock-string-face help-echo "unterminated string literal" cursor-sensor-functions #1#)) . -1636) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . 1) (undo-tree-id781 . 1) (undo-tree-id782 . -1) (undo-tree-id783 . 1) (undo-tree-id784 . 1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (#("[" 0 1 (fontified t font-lock-face font-lock-string-face help-echo "invalid JSX string (cannot contain delimiter in string body)" cursor-sensor-functions #1#)) . -1637) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . 1) (undo-tree-id798 . 1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (#("[" 0 1 (fontified t font-lock-face font-lock-string-face help-echo "invalid JSX string (cannot contain delimiter in string body)" cursor-sensor-functions #1#)) . -1638) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) 1639) nil (23393 61506 126147 0) 0 nil]) ((#("_" 0 1 (fontified t font-lock-face font-lock-string-face help-echo "invalid JSX string (cannot contain delimiter in string body)" cursor-sensor-functions #1#)) . -1639) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) 1640) nil (23393 61506 126161 0) 0 nil]) ((#("bottomFretY]]\"" 0 11 (fontified t font-lock-face font-lock-string-face) 11 12 (fontified t font-lock-face font-lock-string-face) 12 13 (fontified t font-lock-face font-lock-string-face) 13 14 (fontified t font-lock-face font-lock-string-face)) . -1640) (undo-tree-id825 . -14) (undo-tree-id826 . -14) (undo-tree-id827 . -14) (undo-tree-id828 . 14) (undo-tree-id829 . 14) (undo-tree-id830 . -14) (undo-tree-id831 . 1) (undo-tree-id832 . -13) (undo-tree-id833 . 1) (undo-tree-id834 . -14) 1654) nil (23393 61506 126171 0) 0 nil] [nil nil ((#("{string[number.y]}" 0 1 (fontified t face (rainbow-delimiters-depth-8-face)) 1 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-9-face)) 8 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t font-lock-face js2-object-property-access) 16 17 (fontified t face (rainbow-delimiters-depth-9-face)) 17 18 (fontified t face (rainbow-delimiters-depth-8-face))) . 1614) (undo-tree-id202 . -18) (undo-tree-id203 . -18) (undo-tree-id204 . 1) (undo-tree-id205 . 18) (undo-tree-id206 . -1) (undo-tree-id207 . 1) (undo-tree-id208 . 17) (undo-tree-id209 . -2) (undo-tree-id210 . 1) (undo-tree-id211 . 16) (undo-tree-id212 . -3) (undo-tree-id213 . 1) (undo-tree-id214 . 15) (undo-tree-id215 . -4) (undo-tree-id216 . 1) (undo-tree-id217 . 14) (undo-tree-id218 . -5) (undo-tree-id219 . 1) (undo-tree-id220 . 13) (undo-tree-id221 . -6) (undo-tree-id222 . 1) (undo-tree-id223 . 12) (undo-tree-id224 . -7) (undo-tree-id225 . 1) (undo-tree-id226 . 1) (undo-tree-id227 . -7) (undo-tree-id228 . 2) (undo-tree-id229 . 11) (undo-tree-id230 . -8) (undo-tree-id231 . 2) (undo-tree-id232 . 10) (undo-tree-id233 . -9) (undo-tree-id234 . 2) (undo-tree-id235 . 9) (undo-tree-id236 . -10) (undo-tree-id237 . 2) (undo-tree-id238 . 2) (undo-tree-id239 . -10) (undo-tree-id240 . 2) (undo-tree-id241 . 2) (undo-tree-id242 . -10) (undo-tree-id243 . 2) (undo-tree-id244 . 8) (undo-tree-id245 . -11) (undo-tree-id246 . 2) (undo-tree-id247 . 7) (undo-tree-id248 . -12) (undo-tree-id249 . 2) (undo-tree-id250 . 6) (undo-tree-id251 . -13) (undo-tree-id252 . 2) (undo-tree-id253 . 5) (undo-tree-id254 . -14) (undo-tree-id255 . 2) (undo-tree-id256 . 2) (undo-tree-id257 . -14) (undo-tree-id258 . 2) (undo-tree-id259 . 2) (undo-tree-id260 . -14) (undo-tree-id261 . 2) (undo-tree-id262 . 4) (undo-tree-id263 . -15) (undo-tree-id264 . 2) (undo-tree-id265 . 3) (undo-tree-id266 . -16) (undo-tree-id267 . 1) (undo-tree-id268 . 2) (undo-tree-id269 . -17) (undo-tree-id270 . 1) (undo-tree-id271 . -18) (undo-tree-id272 . -18) (undo-tree-id273 . 1) (undo-tree-id274 . 18) (undo-tree-id275 . -1) (undo-tree-id276 . 1) (undo-tree-id277 . -18) (undo-tree-id278 . -17) (undo-tree-id279 . 1) (undo-tree-id280 . -18) (undo-tree-id281 . -18) (undo-tree-id282 . -18) (undo-tree-id283 . 1) (undo-tree-id284 . -17) (undo-tree-id285 . 2) (undo-tree-id286 . 1) (undo-tree-id287 . -16) (undo-tree-id288 . 3) (undo-tree-id289 . 2) (undo-tree-id290 . -15) (undo-tree-id291 . 4) (undo-tree-id292 . 3) (undo-tree-id293 . -14) (undo-tree-id294 . 5) (undo-tree-id295 . 4) (undo-tree-id296 . -13) (undo-tree-id297 . 6) (undo-tree-id298 . 5) (undo-tree-id299 . -12) (undo-tree-id300 . 7) (undo-tree-id301 . 6) (undo-tree-id302 . -11) (undo-tree-id303 . 8) (undo-tree-id304 . 7) (undo-tree-id305 . -10) (undo-tree-id306 . 9) (undo-tree-id307 . 8) (undo-tree-id308 . -9) (undo-tree-id309 . 10) (undo-tree-id310 . 9) (undo-tree-id311 . -8) (undo-tree-id312 . 11) (undo-tree-id313 . 10) (undo-tree-id314 . -7) (undo-tree-id315 . 12) (undo-tree-id316 . 11) (undo-tree-id317 . -6) (undo-tree-id318 . 13) (undo-tree-id319 . 12) (undo-tree-id320 . -5) (undo-tree-id321 . 14) (undo-tree-id322 . 13) (undo-tree-id323 . -4) (undo-tree-id324 . 15) (undo-tree-id325 . 14) (undo-tree-id326 . -3) (undo-tree-id327 . 16) (undo-tree-id328 . 15) (undo-tree-id329 . -2) (undo-tree-id330 . 17) (undo-tree-id331 . 16) (undo-tree-id332 . -1) (undo-tree-id333 . 18) (undo-tree-id334 . 17)) ((1614 . 1632)) (23393 61501 336710 0) 0 nil]) ((#("$" 0 1 (fontified t font-lock-face rjsx-attr)) . 1635) (undo-tree-id335 . 1)) nil (23393 61501 338166 0) 0 nil]) ((1628 . 1630)) nil (23393 61501 336739 0) 0 nil]) ((#("." 0 1 (fontified t help-echo "missing name after . operator" cursor-sensor-functions #1#)) . -1628) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . 1) (undo-tree-id340 . -1) 1629) nil (23393 61501 336751 0) 0 nil]) ((1624 . 1629)) nil (23393 61501 336754 0) 0 nil]) ((#("n" 0 1 (fontified t help-echo "Undeclared variable or function 'nun'" cursor-sensor-functions #1#)) . -1624) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . 1) (undo-tree-id346 . -1) 1625) nil (23393 61501 336766 0) 0 nil]) ((1622 . 1625) (1621 . 1623) (#("[" 0 1 (fontified nil)) . -1621) (1619 . 1622)) nil (23393 61501 336772 0) 0 nil]) ((1615 . 1619) (1614 . 1616) (#("{" 0 1 (fontified nil help-echo "missing value after prop `y2'" cursor-sensor-functions #1#)) . -1614) (1614 . 1615)) nil (23393 61501 336777 0) 0 nil]) ((#("\"" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1614) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . 1) (undo-tree-id352 . 1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("{" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1615) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . 1) (undo-tree-id382 . -1) 1616) nil (23393 61501 336844 0) 0 nil]) ((1615 . 1616) (#("{" 0 1 (fontified nil font-lock-face font-lock-string-face)) . -1615) (1615 . 1616)) nil (23393 61501 336852 0) 0 nil]) ((#("{" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1615) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . 1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#("}" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1616) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . 1) (undo-tree-id399 . 1) (undo-tree-id400 . 1) (undo-tree-id401 . 1) (undo-tree-id402 . 1) (undo-tree-id403 . 1) (undo-tree-id404 . 1) (undo-tree-id405 . 1) (undo-tree-id406 . 1) (undo-tree-id407 . 1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . 1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (#("\"" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1617) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . 1) (undo-tree-id416 . 1) (undo-tree-id417 . 1) (undo-tree-id418 . 1) (undo-tree-id419 . 1) (undo-tree-id420 . 1) (undo-tree-id421 . 1) (undo-tree-id422 . 1) (undo-tree-id423 . 1) (undo-tree-id424 . 1) (undo-tree-id425 . 1) (undo-tree-id426 . 1) (undo-tree-id427 . 1) (undo-tree-id428 . 1) (undo-tree-id429 . 1) (undo-tree-id430 . 1) (undo-tree-id431 . 1) (undo-tree-id432 . 1) (undo-tree-id433 . 1) (undo-tree-id434 . 1) (undo-tree-id435 . 1) (undo-tree-id436 . 1) (undo-tree-id437 . 1) (undo-tree-id438 . 1) (undo-tree-id439 . 1) (undo-tree-id440 . 1) (undo-tree-id441 . 1) (undo-tree-id442 . 1) (undo-tree-id443 . 1) (undo-tree-id444 . 1) (undo-tree-id445 . 1) (undo-tree-id446 . -1) 1618) nil (23393 61501 336964 0) 0 nil]) ((#("s" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1616) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . 1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("t" 0 1 (fontified t font-lock-face font-lock-string-face)) . -1617) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . 1) (undo-tree-id458 . -1) 1618) nil (23393 61501 336993 0) 0 nil]) ((1616 . 1618) (1615 . 1617) (#("{" 0 1 (fontified nil font-lock-face font-lock-string-face)) . -1615) (1615 . 1616)) nil (23393 61501 336998 0) 0 nil]) ((#("]" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id459 . 1) (undo-tree-id460 . 1) (undo-tree-id461 . 1) (undo-tree-id462 . 1) (undo-tree-id463 . 1) (undo-tree-id464 . 1) (undo-tree-id465 . 1) (undo-tree-id466 . 1) (undo-tree-id467 . 1) (undo-tree-id468 . 1) (undo-tree-id469 . 1) (undo-tree-id470 . 1) (undo-tree-id471 . 1) (undo-tree-id472 . 1) (undo-tree-id473 . 1) (undo-tree-id474 . 1) (undo-tree-id475 . 1) (undo-tree-id476 . 1) (undo-tree-id477 . 1) (undo-tree-id478 . 1) (undo-tree-id479 . 1) (undo-tree-id480 . 1) (undo-tree-id481 . 1) (undo-tree-id482 . 1) (undo-tree-id483 . 1) (undo-tree-id484 . 1) (undo-tree-id485 . 1) (#("]" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id486 . 1) (undo-tree-id487 . 1) (undo-tree-id488 . 1) (undo-tree-id489 . 1) (undo-tree-id490 . 1) (undo-tree-id491 . 1) (undo-tree-id492 . 1) (undo-tree-id493 . 1) (undo-tree-id494 . 1) (undo-tree-id495 . 1) (undo-tree-id496 . 1) (undo-tree-id497 . 1) (undo-tree-id498 . 1) (undo-tree-id499 . 1) (undo-tree-id500 . 1) (undo-tree-id501 . 1) (undo-tree-id502 . 1) (undo-tree-id503 . 1) (undo-tree-id504 . 1) (undo-tree-id505 . 1) (undo-tree-id506 . 1) (undo-tree-id507 . 1) (undo-tree-id508 . 1) (undo-tree-id509 . 1) (undo-tree-id510 . 1) (#("Y" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id511 . 1) (undo-tree-id512 . 1) (undo-tree-id513 . 1) (undo-tree-id514 . 1) (undo-tree-id515 . 1) (undo-tree-id516 . 1) (undo-tree-id517 . 1) (undo-tree-id518 . 1) (undo-tree-id519 . 1) (undo-tree-id520 . 1) (undo-tree-id521 . 1) (undo-tree-id522 . 1) (undo-tree-id523 . 1) (undo-tree-id524 . 1) (undo-tree-id525 . 1) (undo-tree-id526 . 1) (undo-tree-id527 . 1) (undo-tree-id528 . 1) (undo-tree-id529 . 1) (undo-tree-id530 . 1) (undo-tree-id531 . 1) (undo-tree-id532 . 1) (undo-tree-id533 . 1) (#("t" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id534 . 1) (undo-tree-id535 . 1) (undo-tree-id536 . 1) (undo-tree-id537 . 1) (undo-tree-id538 . 1) (undo-tree-id539 . 1) (undo-tree-id540 . 1) (undo-tree-id541 . 1) (undo-tree-id542 . 1) (undo-tree-id543 . 1) (undo-tree-id544 . 1) (undo-tree-id545 . 1) (undo-tree-id546 . 1) (undo-tree-id547 . 1) (undo-tree-id548 . 1) (undo-tree-id549 . 1) (undo-tree-id550 . 1) (undo-tree-id551 . 1) (undo-tree-id552 . 1) (undo-tree-id553 . 1) (undo-tree-id554 . 1) (#("e" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id555 . 1) (undo-tree-id556 . 1) (undo-tree-id557 . 1) (undo-tree-id558 . 1) (undo-tree-id559 . 1) (undo-tree-id560 . 1) (undo-tree-id561 . 1) (undo-tree-id562 . 1) (undo-tree-id563 . 1) (undo-tree-id564 . 1) (undo-tree-id565 . 1) (undo-tree-id566 . 1) (undo-tree-id567 . 1) (undo-tree-id568 . 1) (undo-tree-id569 . 1) (undo-tree-id570 . 1) (undo-tree-id571 . 1) (undo-tree-id572 . 1) (undo-tree-id573 . 1) (#("r" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id574 . 1) (undo-tree-id575 . 1) (undo-tree-id576 . 1) (undo-tree-id577 . 1) (undo-tree-id578 . 1) (undo-tree-id579 . 1) (undo-tree-id580 . 1) (undo-tree-id581 . 1) (undo-tree-id582 . 1) (undo-tree-id583 . 1) (undo-tree-id584 . 1) (undo-tree-id585 . 1) (undo-tree-id586 . 1) (undo-tree-id587 . 1) (undo-tree-id588 . 1) (undo-tree-id589 . 1) (undo-tree-id590 . 1) (#("F" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id591 . 1) (undo-tree-id592 . 1) (undo-tree-id593 . 1) (undo-tree-id594 . 1) (undo-tree-id595 . 1) (undo-tree-id596 . 1) (undo-tree-id597 . 1) (undo-tree-id598 . 1) (undo-tree-id599 . 1) (undo-tree-id600 . 1) (undo-tree-id601 . 1) (undo-tree-id602 . 1) (undo-tree-id603 . 1) (undo-tree-id604 . 1) (undo-tree-id605 . 1) (#("p" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id606 . 1) (undo-tree-id607 . 1) (undo-tree-id608 . 1) (undo-tree-id609 . 1) (undo-tree-id610 . 1) (undo-tree-id611 . 1) (undo-tree-id612 . 1) (undo-tree-id613 . 1) (undo-tree-id614 . 1) (undo-tree-id615 . 1) (undo-tree-id616 . 1) (undo-tree-id617 . 1) (undo-tree-id618 . 1) (#("o" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id619 . 1) (undo-tree-id620 . 1) (undo-tree-id621 . 1) (undo-tree-id622 . 1) (undo-tree-id623 . 1) (undo-tree-id624 . 1) (undo-tree-id625 . 1) (undo-tree-id626 . 1) (undo-tree-id627 . 1) (undo-tree-id628 . 1) (undo-tree-id629 . 1) (#("t" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id630 . 1) (undo-tree-id631 . 1) (undo-tree-id632 . 1) (undo-tree-id633 . 1) (undo-tree-id634 . 1) (undo-tree-id635 . 1) (undo-tree-id636 . 1) (undo-tree-id637 . 1) (undo-tree-id638 . 1) (#("_" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id639 . -1) (undo-tree-id640 . 1) (undo-tree-id641 . 1) (undo-tree-id642 . 1) (undo-tree-id643 . 1) (undo-tree-id644 . 1) (#("[" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id645 . 1) (undo-tree-id646 . 1) (undo-tree-id647 . -1) (undo-tree-id648 . 1) (undo-tree-id649 . 1) (#("[" 0 1 (fontified t font-lock-face font-lock-string-face)) . 1615) (undo-tree-id650 . 1) (undo-tree-id651 . 1) (undo-tree-id652 . -1)) nil (23393 61501 337324 0) 0 nil]) ((#("$" 0 1 (fontified t font-lock-face rjsx-attr)) . 1613) (undo-tree-id653 . 1) (undo-tree-id654 . 1) (undo-tree-id655 . -1) (undo-tree-id656 . 1)) nil (23393 61501 337358 0) 0 nil]) ((1601 . 1607) (1600 . 1602) (#("{" 0 1 (fontified nil font-lock-face font-lock-string-face)) . -1600) (1599 . 1601)) nil (23393 61501 337363 0) 0 nil]) ((1599 . 1600) (#("`" 0 1 (fontified nil)) . -1599) (1599 . 1600) (#("`" 0 1 (fontified nil font-lock-face font-lock-string-face help-echo "missing `}' after expression" cursor-sensor-functions #1#)) . -1599) (1599 . 1600)) nil (23393 61501 337368 0) 0 nil]) ((1599 . 1600) (#("}" 0 1 (fontified nil font-lock-face font-lock-string-face help-echo "missing `}' after expression" cursor-sensor-functions #1#)) . -1599) (1599 . 1600)) nil (23393 61501 337372 0) 0 nil]) ((#("\"" 0 1 (fontified t font-lock-face font-lock-string-face help-echo "missing `}' after expression" cursor-sensor-functions #1#)) . -1599) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . 1) (undo-tree-id660 . 1) (undo-tree-id661 . 1) (undo-tree-id662 . 1) (undo-tree-id663 . 1) (undo-tree-id664 . 1) (undo-tree-id665 . 1) (undo-tree-id666 . 1) (undo-tree-id667 . 1) (undo-tree-id668 . 1) (undo-tree-id669 . -1) (undo-tree-id670 . 1) (undo-tree-id671 . 1) (undo-tree-id672 . 1) (undo-tree-id673 . 1) (undo-tree-id674 . -1) 1600) nil (23393 61501 337406 0) 0 nil]) ((#("`" 0 1 (fontified t font-lock-face font-lock-string-face help-echo "missing `}' after expression" cursor-sensor-functions #1#)) . 1596) (undo-tree-id675 . 1)) nil (23393 61501 337412 0) 0 nil]) ((1595 . 1597) (#("`" 0 1 (fontified nil)) . -1595) (1595 . 1596) (#("`" 0 1 (fontified nil help-echo "missing `}' after expression" cursor-sensor-functions #1# face (rainbow-delimiters-depth-8-face))) . -1595) (1595 . 1596)) nil (23393 61501 337417 0) 0 nil]) ((#("\"" 0 1 (fontified t font-lock-face font-lock-string-face help-echo "missing `}' after expression" cursor-sensor-functions #1#)) . -1595) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . 1) (undo-tree-id679 . 1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . 1) (undo-tree-id683 . 1) (undo-tree-id684 . 1) (undo-tree-id685 . 1) (undo-tree-id686 . 1) (undo-tree-id687 . -1) 1596) nil (23393 61501 337439 0) 0 nil]) ((#("}" 0 1 (fontified t help-echo "empty `{}' expression" cursor-sensor-functions #1# face (rainbow-delimiters-depth-8-face))) . 1595) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . 1)) nil (23393 61501 337448 0) 0 nil]) ((1594 . 1596) (#("{" 0 1 (fontified nil)) . -1594) (1594 . 1595)) nil (23393 61501 337452 0) 0 nil]) ((#("1" 0 1 (font-lock-face font-lock-string-face fontified t)) . -1598) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . 1) (undo-tree-id695 . 1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) 1599) nil (23393 61501 337469 0) 0 nil]) ((1546 . 1564)) nil (23393 61501 337473 0) 0 nil]) ((#("                  const" 0 18 (fontified t) 18 23 (fontified t font-lock-face font-lock-keyword-face)) . 1546) (undo-tree-id700 . -18) (undo-tree-id701 . -18) (undo-tree-id702 . 5) (undo-tree-id703 . -19) (undo-tree-id704 . 4) (undo-tree-id705 . -20) (undo-tree-id706 . -20) (undo-tree-id707 . -20) (undo-tree-id708 . -20) (undo-tree-id709 . -20) (undo-tree-id710 . -20) (undo-tree-id711 . -20) (undo-tree-id712 . 3) (undo-tree-id713 . -21) (undo-tree-id714 . 2) (undo-tree-id715 . -22) (undo-tree-id716 . 1) (undo-tree-id717 . -23) (undo-tree-id718 . -23) (undo-tree-id719 . 23) (undo-tree-id720 . -23)) nil (23393 61501 337511 0) 0 nil]) ((1566 . 1569)) nil (23393 61501 337516 0) 0 nil]) ((#("s" 0 1 (fontified t help-echo "Undeclared variable or function 'cos'" cursor-sensor-functions #1#)) . -1566) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . 1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (#("n" 0 1 (fontified t help-echo "Undeclared variable or function 'cosn'" cursor-sensor-functions #1#)) . -1567) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . 1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (#("t" 0 1 (fontified t help-echo "Undeclared variable or function 'cosnt'" cursor-sensor-functions #1#)) . -1568) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . 1) (undo-tree-id741 . -1) 1569) nil (23393 61501 337552 0) 0 nil]) ((1564 . 1569)) nil (23393 61501 337558 0) 0 nil]) ((1545 . 1564)) nil (23393 61501 337560 0) 0 nil]) ((1701 . 1729) (#("                    " 0 17 (fontified t help-echo #5="missing ; after statement" cursor-sensor-functions #1#) 17 20 (fontified t help-echo #5# cursor-sensor-functions #1#)) . 1701) 1731) nil (23393 61501 337563 0) 0 nil]) ((1625 . 1653) (#("                  " 0 18 (fontified t)) . 1625) 1645) nil (23393 61501 337566 0) 0 nil]) ((1546 . 1566) (#("            " 0 4 (fontified t) 4 12 (fontified t)) . 1546) (undo-tree-id742 . -12) (undo-tree-id743 . 12) 1562) nil (23393 61501 337573 0) 0 nil]) ((1419 . 1426)) nil (23393 61501 337576 0) 0 nil]) ((#("vertical" 0 8 (fontified t font-lock-face rjsx-text syntax-table #13=#^[nil #^[#7=(0) nil syntax-table #10=
#^^[3 0 #6=(1) #6# #6# #6# #6# #6# #6# #6# #6# #7# #7# #6# #7# #7# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #7# #6# (7) #6# #8=(2) #8# #9=(3) #6# (4 . 41) (5 . 40) #9# #9# #6# #9# #6# #9# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #6# #6# #9# #9# #9# #6# #6# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# (4 . 93) (9) (5 . 91) #6# #9# #6# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# (4 . 125) #9# (5 . 123) #6# #6#] #^^[1 0 #^^[2 0 #10# 











#^^[3 8320 #8# #9# #9# #9# #9# #8# #8# #8# #8# #8# #8# #8# #8# (4 . 8334) (5 . 8333) #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #9# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8#] 



#^^[3 9088 #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# (4 . 9141) (5 . 9140) #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6# #6#] 

#^^[3 9344 #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8#] 

#^^[3 9600 #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #9# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #9# #9# #8# #9# #9# #9# #9# #9# #9# #9# #8# #8# #8# #8# #8# #8# #8# #8# #9# #9# #8# #8# #9# #9# #8# #8# #8# #8# #9# #9# #8# #8# #9# #9# #8# #8# #8# #8# #9# #9# #9# #8# #8# #9# #8# #8# #9# #9# #9# #9# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #9# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8#] 



#^^[3 10624 #8# #8# #8# (4 . 10628) (5 . 10627) (4 . 10630) (5 . 10629) (4 . 10632) (5 . 10631) (4 . 10634) (5 . 10633) (4 . 10636) (5 . 10635) (4 . 10638) (5 . 10637) (4 . 10640) (5 . 10639) (4 . 10642) (5 . 10641) (4 . 10644) (5 . 10643) (4 . 10646) (5 . 10645) (4 . 10648) (5 . 10647) #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# (4 . 10749) (5 . 10748) #8# #8#] #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8#] #^^[2 12288 
#^^[3 12288 #9# #9# #9# #9# #8# #8# #8# #8# (4 . 12297) (5 . 12296) (4 . 12299) (5 . 12298) (4 . 12301) (5 . 12300) (4 . 12303) (5 . 12302) (4 . 12305) (5 . 12304) #9# #9# (4 . 12309) (5 . 12308) (4 . 12311) (5 . 12310) (4 . 12313) (5 . 12312) (4 . 12315) (5 . 12314) #9# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8#] 





#^^[3 65024 #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# (4 . 65078) (5 . 65077) (4 . 65080) (5 . 65079) (4 . 65082) (5 . 65081) (4 . 65084) (5 . 65083) (4 . 65086) (5 . 65085) (4 . 65088) (5 . 65087) (4 . 65090) (5 . 65089) (4 . 65092) (5 . 65091) #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# (4 . 65114) (5 . 65113) (4 . 65116) (5 . 65115) (4 . 65118) (5 . 65117) #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8#] #8# 











#^^[3 2597376 #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #8# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9# #9#] 
syntax-table #11=
#^^[3 0 nil nil nil nil nil nil nil nil nil nil #6# nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] #^^[1 0 #^^[2 0 #11# nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil])) . -1419) (undo-tree-id744 . -8) (undo-tree-id745 . -8) (undo-tree-id746 . -8) (undo-tree-id747 . -8) (undo-tree-id748 . -8) (undo-tree-id749 . -8) (undo-tree-id750 . -8) 1427) nil (23393 61501 337589 0) 0 nil]) ((1702 . 1704) 1748) nil (23393 61501 337592 0) 0 nil]) ((1547 . 1748)) nil (23393 61501 337594 0) 0 nil] [nil nil ((1517 . 1718)) ((#("            <line id=\"str1\" y2$=\"[[_topFretY]]\" y1$=\"[[_bottomFretY]]\"
                  x1$=\"[[_rightStringX]]\" x2$=\"[[_rightStringX]]\"
                  strokeWidth=\"0.5%\" stroke=\"#000\" fill=\"none\"/>" 0 4 (fontified t) 4 12 (fontified t) 12 13 (font-lock-face rjsx-tag-bracket-face fontified t) 13 17 (font-lock-face rjsx-tag fontified t) 17 18 (fontified t) 18 20 (font-lock-face rjsx-attr fontified t) 20 21 (fontified t) 21 27 (font-lock-face font-lock-string-face fontified t) 27 28 (fontified t) 28 31 (font-lock-face rjsx-attr fontified t) 31 32 (fontified t) 32 47 (font-lock-face font-lock-string-face fontified t) 47 48 (fontified t) 48 51 (font-lock-face rjsx-attr fontified t) 51 52 (fontified t) 52 70 (font-lock-face font-lock-string-face fontified t) 70 89 (fontified t) 89 92 (font-lock-face rjsx-attr fontified t) 92 93 (fontified t) 93 112 (font-lock-face font-lock-string-face fontified t) 112 113 (fontified t) 113 116 (font-lock-face rjsx-attr fontified t) 116 117 (fontified t) 117 136 (font-lock-face font-lock-string-face fontified t) 136 137 (fontified t) 137 154 (help-echo #12="Code has no side effects" cursor-sensor-functions #1# fontified t) 154 155 (help-echo #12# cursor-sensor-functions #1# fontified t) 155 166 (font-lock-face rjsx-attr help-echo #12# cursor-sensor-functions #1# fontified t) 166 167 (help-echo #12# cursor-sensor-functions #1# fontified t) 167 173 (font-lock-face font-lock-string-face help-echo #12# cursor-sensor-functions #1# fontified t) 173 174 (help-echo #12# cursor-sensor-functions #1# fontified t) 174 180 (font-lock-face rjsx-attr help-echo #12# cursor-sensor-functions #1# fontified t) 180 181 (help-echo #12# cursor-sensor-functions #1# fontified t) 181 187 (font-lock-face font-lock-string-face help-echo #12# cursor-sensor-functions #1# fontified t) 187 188 (help-echo #12# cursor-sensor-functions #1# fontified t) 188 192 (font-lock-face rjsx-attr help-echo #12# cursor-sensor-functions #1# fontified t) 192 193 (help-echo #12# cursor-sensor-functions #1# fontified t) 193 199 (font-lock-face font-lock-string-face help-echo #12# cursor-sensor-functions #1# fontified t) 199 200 (rjsx-class self-closing-slash font-lock-face rjsx-tag-bracket-face help-echo #12# cursor-sensor-functions #1# fontified t) 200 201 (font-lock-face rjsx-tag-bracket-face help-echo #12# cursor-sensor-functions #1# fontified t)) . 1517) (undo-tree-id195 . -201) (undo-tree-id196 . -201) (undo-tree-id197 . -201) (undo-tree-id198 . -137) (undo-tree-id199 . -201) (undo-tree-id200 . 201) (undo-tree-id201 . -201)) (23393 61408 559957 0) 0 nil]) ((#("            <line id=\"str1\" y2$=\"[[_topFretY]]\" y1$=\"[[_bottomFretY]]\"
                  x1$=\"[[_rightStringX]]\" x2$=\"[[_rightStringX]]\"
                  strokeWidth=\"0.5%\" stroke=\"#000\" fill=\"none\"/>" 0 4 (font-lock-face rjsx-text syntax-table #13# fontified t) 4 12 (font-lock-face rjsx-text syntax-table #13# fontified t) 12 13 (font-lock-face rjsx-tag-bracket-face fontified t) 13 17 (font-lock-face rjsx-tag fontified t) 17 18 (fontified t) 18 20 (font-lock-face rjsx-attr fontified t) 20 21 (fontified t) 21 27 (font-lock-face font-lock-string-face fontified t) 27 28 (fontified t) 28 31 (font-lock-face rjsx-attr fontified t) 31 32 (fontified t) 32 47 (font-lock-face font-lock-string-face fontified t) 47 48 (fontified t) 48 51 (font-lock-face rjsx-attr fontified t) 51 52 (fontified t) 52 70 (font-lock-face font-lock-string-face fontified t) 70 89 (fontified t) 89 92 (font-lock-face rjsx-attr fontified t) 92 93 (fontified t) 93 112 (font-lock-face font-lock-string-face fontified t) 112 113 (fontified t) 113 116 (font-lock-face rjsx-attr fontified t) 116 117 (fontified t) 117 136 (font-lock-face font-lock-string-face fontified t) 136 154 (fontified t) 154 155 (fontified t) 155 166 (font-lock-face rjsx-attr fontified t) 166 167 (fontified t) 167 173 (font-lock-face font-lock-string-face fontified t) 173 174 (fontified t) 174 180 (font-lock-face rjsx-attr fontified t) 180 181 (fontified t) 181 187 (font-lock-face font-lock-string-face fontified t) 187 188 (fontified t) 188 192 (font-lock-face rjsx-attr fontified t) 192 193 (fontified t) 193 199 (font-lock-face font-lock-string-face fontified t) 199 200 (rjsx-class self-closing-slash font-lock-face rjsx-tag-bracket-face fontified t) 200 201 (font-lock-face rjsx-tag-bracket-face fontified t)) . -1615) (undo-tree-id0 . -201) (undo-tree-id1 . -201) (undo-tree-id2 . 185) (undo-tree-id3 . 185) (undo-tree-id4 . -16) (undo-tree-id5 . -16) (undo-tree-id6 . 178) (undo-tree-id7 . -23) (undo-tree-id8 . 178) (undo-tree-id9 . 178) (undo-tree-id10 . -23) (undo-tree-id11 . 201) (undo-tree-id12 . 178) (undo-tree-id13 . 201) (undo-tree-id14 . 201) (undo-tree-id15 . -201) (undo-tree-id16 . 130) (undo-tree-id17 . 201) (undo-tree-id18 . -71) (undo-tree-id19 . 64) (undo-tree-id20 . 130) (undo-tree-id21 . -137) (undo-tree-id22 . 64) (undo-tree-id23 . -201) (undo-tree-id24 . -201) 1816) nil (23393 61408 560777 0) 0 nil]) ((1543 . 1544)) nil (23393 61408 560073 0) 0 nil]) ((#("1" 0 1 (fontified t)) . -1543) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . 1) (undo-tree-id28 . -1) (undo-tree-id29 . 1) (undo-tree-id30 . 1) (undo-tree-id31 . 1) (undo-tree-id32 . -1) (undo-tree-id33 . 1) (undo-tree-id34 . -1) 1544) nil (23393 61408 560093 0) 0 nil]) ((1547 . 1565)) nil (23393 61408 560097 0) 0 nil]) ((#("                  sd" 0 18 (fontified t) 18 20 (fontified t help-echo "missing ; after statement" cursor-sensor-functions #1#)) . 1547) (undo-tree-id35 . -20) (undo-tree-id36 . -18) (undo-tree-id37 . -18) (undo-tree-id38 . -18) (undo-tree-id39 . 2) (undo-tree-id40 . -19) (undo-tree-id41 . -18) (undo-tree-id42 . -20) (undo-tree-id43 . -18) (undo-tree-id44 . -20) (undo-tree-id45 . -18) (undo-tree-id46 . -20) (undo-tree-id47 . 1) (undo-tree-id48 . -20) (undo-tree-id49 . 20) (undo-tree-id50 . -20)) nil (23393 61408 560135 0) 0 nil]) ((1565 . 1567)) nil (23393 61408 560139 0) 0 nil]) ((1547 . 1565) (1548 . 1564) (#("                  " 0 18 (fontified nil face (rainbow-delimiters-depth-7-face))) . 1547) (1547 . 1565) (1546 . 1548)) nil (23393 61408 560143 0) 0 nil]) ((1545 . 1547) (#("{" 0 1 (fontified nil help-echo "missing `}' after expression" cursor-sensor-functions #1# face (rainbow-delimiters-depth-7-face))) . -1545) (1545 . 1546)) nil (23393 61408 560147 0) 0 nil]) ((1543 . 1544)) nil (23393 61408 560150 0) 0 nil]) ((1542 . 1543)) nil (23393 61408 560152 0) 0 nil]) ((1536 . 1542) (1535 . 1537) (#("(" 0 1 (fontified nil font-lock-face font-lock-keyword-face help-echo "syntax error" cursor-sensor-functions #1#)) . -1535) (1533 . 1536)) nil (23393 61408 560155 0) 0 nil]) ((1504 . 1510)) nil (23393 61408 560158 0) 0 nil]) ((#("n" 0 1 (fontified t font-lock-face js2-function-param)) . -1504) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . 1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("u" 0 1 (fontified t font-lock-face js2-function-param)) . -1505) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . 1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("m" 0 1 (fontified t font-lock-face js2-function-param)) . -1506) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . 1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("b" 0 1 (fontified t font-lock-face js2-function-param)) . -1507) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . 1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("e" 0 1 (fontified t font-lock-face js2-function-param)) . -1508) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . 1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("r" 0 1 (fontified t font-lock-face js2-function-param)) . -1509) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . 1) (undo-tree-id107 . -1) 1510) nil (23393 61408 560262 0) 0 nil]) ((1504 . 1510)) nil (23393 61408 560272 0) 0 nil]) ((#("N" 0 1 (fontified t font-lock-face js2-function-param)) . -1504) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . 1) (undo-tree-id111 . -1) 1505) nil (23393 61408 560281 0) 0 nil]) ((1504 . 1505)) nil (23393 61408 560283 0) 0 nil]) ((#("i" 0 1 (fontified t font-lock-face js2-function-param)) . -1504) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("n" 0 1 (fontified t font-lock-face font-lock-keyword-face help-echo "syntax error" cursor-sensor-functions #1#)) . -1505) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("d" 0 1 (fontified t font-lock-face js2-function-param)) . -1506) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . 1) (undo-tree-id141 . 1) (undo-tree-id142 . 1) (undo-tree-id143 . 1) (undo-tree-id144 . 1) (undo-tree-id145 . 1) (undo-tree-id146 . 1) (undo-tree-id147 . 1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) 1507) nil (23393 61408 560353 0) 0 nil]) ((1514 . 1530) (1515 . 1529) (#("                " 0 16 (fontified nil face (rainbow-delimiters-depth-6-face))) . 1514) (1514 . 1530) (1513 . 1515)) nil (23393 61408 560363 0) 0 nil]) ((1512 . 1514) (#("{" 0 1 (fontified nil)) . -1512) (1511 . 1513)) nil (23393 61408 560367 0) 0 nil]) ((1510 . 1511)) nil (23393 61408 560369 0) 0 nil]) ((1509 . 1510)) nil (23393 61408 560371 0) 0 nil]) ((#("-" 0 1 (fontified t)) . -1509) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . 1) (undo-tree-id157 . -1) 1510) nil (23393 61408 560382 0) 0 nil]) ((1509 . 1510)) nil (23393 61408 560386 0) 0 nil]) ((1502 . 1507)) nil (23393 61408 560388 0) 0 nil]) ((1503 . 1504)) nil (23393 61408 560390 0) 0 nil]) ((1496 . 1502)) nil (23393 61408 560392 0) 0 nil]) ((#(")" 0 1 (fontified nil)) . -1496) (1496 . 1497) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face))) . -1496) (1496 . 1497) (1495 . 1497) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -1495) (1495 . 1496) (1494 . 1496) (#("(" 0 1 (fontified nil font-lock-face js2-object-property-access)) . -1494) (1491 . 1495)) nil (23393 61408 560399 0) 0 nil]) ((#("m" 0 1 (fontified t font-lock-face js2-object-property-access)) . -1491) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("a" 0 1 (fontified t font-lock-face js2-object-property-access)) . -1492) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("p" 0 1 (fontified t font-lock-face js2-object-property-access)) . -1493) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("(" 0 1 (fontified t help-echo "missing `}' after expression" cursor-sensor-functions #1# face (rainbow-delimiters-depth-5-face))) . -1494) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -1495) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . 1) (undo-tree-id174 . -1) 1496) nil (23393 61408 560434 0) 0 nil]) ((1495 . 1496) (#(")" 0 1 (fontified nil help-echo "missing `}' after expression" cursor-sensor-functions #1# face (rainbow-delimiters-depth-5-face))) . -1495) (1495 . 1496)) nil (23393 61408 560442 0) 0 nil]) ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face))) . -1495) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#(")" 0 1 (fontified t help-echo "syntax error" cursor-sensor-functions #1# face (rainbow-delimiters-depth-6-face))) . 1496)) nil (23393 61408 560448 0) 0 nil]) ((#(")" 0 1 (fontified t help-echo "syntax error" cursor-sensor-functions #1# face (rainbow-delimiters-depth-6-face))) . -1496) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . 1) (undo-tree-id180 . -1) 1497) nil (23393 61408 560457 0) 0 nil]) ((#(")" 0 1 (fontified nil)) . -1496) (1496 . 1497) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-6-face))) . -1496) (1496 . 1497) (1495 . 1497) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -1495) (1495 . 1496)) nil (23393 61408 560462 0) 0 nil]) ((1494 . 1496) (#("(" 0 1 (fontified nil font-lock-face js2-object-property-access)) . -1494) (1474 . 1495)) nil (23393 61408 560470 0) 0 nil]) ((#("." 0 1 (fontified t help-echo "missing name after . operator" cursor-sensor-functions #1#)) . -1474) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("s" 0 1 (fontified t font-lock-face js2-object-property-access)) . -1475) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("d" 0 1 (fontified t font-lock-face js2-object-property-access)) . -1476) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("a" 0 1 (fontified t font-lock-face js2-object-property-access)) . -1477) (undo-tree-id188 . -1) (undo-tree-id189 . -1) 1478) nil (23393 61408 560491 0) 0 nil]) ((1474 . 1478)) nil (23393 61408 560495 0) 0 nil]) ((#("," 0 1 (fontified t help-echo "syntax error" cursor-sensor-functions #1#)) . -1474) (undo-tree-id190 . -1) (undo-tree-id191 . -1) 1475) nil (23393 61408 560501 0) 0 nil]) ((1474 . 1475)) nil (23393 61408 560504 0) 0 nil]) ((#("." 0 1 (help-echo "missing name after . operator" cursor-sensor-functions #1# fontified t)) . -1474) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) 1475 (t 23393 60511 385458 725000)) nil (23393 61408 560512 0) 0 nil]) ((816 . 817)) nil (23393 60511 367731 0) 0 nil]) ((504 . 505)) nil (23393 60511 367740 0) 0 nil]) ((640 . 641) (t 23393 59658 492952 995000)) nil (23393 60511 367746 0) 0 nil]) ((#(" " 0 1 (fontified t help-echo "missing `}' after expression" cursor-sensor-functions #1#)) . -1472) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . 1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 1473) nil (23393 59658 471288 0) 0 nil]) ((1461 . 1473)) nil (23393 59658 471294 0) 0 nil]) ((#("}" 0 1 (fontified nil)) . 1461) (1461 . 1462) (#("}" 0 1 (fontified nil help-echo "empty `{}' expression" cursor-sensor-functions #1#)) . -1461) (1461 . 1462)) nil (23393 59658 471297 0) 0 nil]) ((1447 . 1461) (1448 . 1460) (#("              " 0 14 (fontified nil help-echo "empty `{}' expression" cursor-sensor-functions #1# face (rainbow-delimiters-depth-4-face))) . 1447) (1447 . 1461) (1446 . 1448)) nil (23393 59658 471300 0) 0 nil]) ((1446 . 1447) (nil fontified nil 1445 . 1446) (nil font-lock-face rjsx-text 1445 . 1446) (1445 . 1446) (#("{" 0 1 (fontified nil font-lock-face rjsx-text)) . -1445) (1445 . 1446)) nil (23393 59658 471306 0) 0 nil]) ((#("e" 0 1 (fontified t font-lock-face rjsx-text syntax-table #13#)) . -1445) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . 1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 1446) nil (23393 59658 471314 0) 0 nil]) ((1433 . 1445) 1434) nil (23393 59658 471316 0) 0 nil]) ((1433 . 1434)) nil (23393 59658 471318 0) 0 nil]) ((#("                  strokeWidth=\"0.5%\" stroke=\"#000\" fill=\"none\"/>" 0 18 (fontified t help-echo #14="syntax error" cursor-sensor-functions #1#) 18 29 (fontified t help-echo #14# cursor-sensor-functions #1#) 29 30 (fontified t help-echo #14# cursor-sensor-functions #1#) 30 36 (fontified t help-echo #14# cursor-sensor-functions #1#) 36 37 (fontified t help-echo #14# cursor-sensor-functions #1#) 37 43 (fontified t help-echo #14# cursor-sensor-functions #1#) 43 44 (fontified t help-echo #14# cursor-sensor-functions #1#) 44 50 (fontified t help-echo #14# cursor-sensor-functions #1#) 50 51 (fontified t help-echo #14# cursor-sensor-functions #1#) 51 55 (fontified t help-echo #14# cursor-sensor-functions #1#) 55 56 (fontified t help-echo #14# cursor-sensor-functions #1#) 56 62 (fontified t help-echo #14# cursor-sensor-functions #1#) 62 63 (rjsx-class self-closing-slash fontified t help-echo #14# cursor-sensor-functions #1#) 63 64 (fontified t help-echo #14# cursor-sensor-functions #1#)) . 1433) (undo-tree-id86 . 64) (undo-tree-id87 . 64) (undo-tree-id88 . 60) (undo-tree-id89 . 60) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . 64) (undo-tree-id93 . 64) (undo-tree-id94 . 64) (undo-tree-id95 . 64) (undo-tree-id96 . 64) (undo-tree-id97 . 64) (undo-tree-id98 . 64) (undo-tree-id99 . 64) (undo-tree-id100 . 64) (undo-tree-id101 . 64) (undo-tree-id102 . 64) (undo-tree-id103 . 64) (undo-tree-id104 . 64) (undo-tree-id105 . 64) (undo-tree-id106 . 64) (undo-tree-id107 . 64) (undo-tree-id108 . 64) (undo-tree-id109 . 64) (undo-tree-id110 . 64) (undo-tree-id111 . 64) (undo-tree-id112 . 64) (undo-tree-id113 . 64) (undo-tree-id114 . 64) (undo-tree-id115 . 64) (undo-tree-id116 . 64) (undo-tree-id117 . 64) (undo-tree-id118 . 64) (undo-tree-id119 . 64) (undo-tree-id120 . 64) (undo-tree-id121 . 64) (undo-tree-id122 . 64) (undo-tree-id123 . 64) (undo-tree-id124 . 64) (undo-tree-id125 . 64) (undo-tree-id126 . 64) (undo-tree-id127 . 64) (undo-tree-id128 . 64) (undo-tree-id129 . 64) (undo-tree-id130 . 64) (undo-tree-id131 . 64) (undo-tree-id132 . 64) (undo-tree-id133 . 64) (undo-tree-id134 . 64) (undo-tree-id135 . 64) (undo-tree-id136 . 64) (undo-tree-id137 . 64) (undo-tree-id138 . 64) (undo-tree-id139 . 64) (undo-tree-id140 . 64) (undo-tree-id141 . 64) (undo-tree-id142 . 64) (undo-tree-id143 . 64) (undo-tree-id144 . 64) (undo-tree-id145 . 64) (undo-tree-id146 . 64) (undo-tree-id147 . 64) (undo-tree-id148 . 64) (undo-tree-id149 . 64) (undo-tree-id150 . 64) (undo-tree-id151 . 64) (undo-tree-id152 . -64) (undo-tree-id153 . 64) (undo-tree-id154 . 64) (undo-tree-id155 . -64)) nil (23393 59658 471442 0) 0 nil]) ((#("
" 0 1 (fontified t help-echo "syntax error" cursor-sensor-functions #1#)) . 1433) (undo-tree-id156 . 1) (undo-tree-id157 . 1) (undo-tree-id158 . 1) (undo-tree-id159 . 1) (undo-tree-id160 . 1) (undo-tree-id161 . 1) (undo-tree-id162 . 1) (undo-tree-id163 . 1) (undo-tree-id164 . 1) (undo-tree-id165 . 1) (undo-tree-id166 . 1) (undo-tree-id167 . 1) (undo-tree-id168 . 1) (undo-tree-id169 . 1) (undo-tree-id170 . 1) (undo-tree-id171 . 1) (undo-tree-id172 . 1) (undo-tree-id173 . 1) (undo-tree-id174 . 1) (undo-tree-id175 . 1) (undo-tree-id176 . 1) (undo-tree-id177 . 1) (undo-tree-id178 . 1) (undo-tree-id179 . 1) (undo-tree-id180 . 1) (undo-tree-id181 . 1) (undo-tree-id182 . 1) (undo-tree-id183 . 1) (undo-tree-id184 . 1) (undo-tree-id185 . 1) (undo-tree-id186 . 1) (undo-tree-id187 . 1) (undo-tree-id188 . 1) (undo-tree-id189 . 1) (undo-tree-id190 . 1) (undo-tree-id191 . 1) (undo-tree-id192 . 1) (undo-tree-id193 . 1) (undo-tree-id194 . 1) (undo-tree-id195 . 1) (undo-tree-id196 . 1) (undo-tree-id197 . 1) (undo-tree-id198 . 1) (undo-tree-id199 . 1) (undo-tree-id200 . 1) (undo-tree-id201 . 1) (undo-tree-id202 . 1) (undo-tree-id203 . 1) (undo-tree-id204 . 1) (undo-tree-id205 . 1) (undo-tree-id206 . 1) (undo-tree-id207 . 1) (undo-tree-id208 . 1) (undo-tree-id209 . 1) (undo-tree-id210 . 1) (undo-tree-id211 . 1) (undo-tree-id212 . 1) (undo-tree-id213 . 1) (undo-tree-id214 . 1) (undo-tree-id215 . 1) (undo-tree-id216 . 1) (undo-tree-id217 . 1) (undo-tree-id218 . -1)) nil (23393 59658 471539 0) 0 nil]) ((#("            <line id=\"str2\" y2$=\"[[_topFretY]]\" y1$=\"[[_bottomFretY]]\"" 0 12 (fontified t font-lock-face rjsx-text syntax-table #13#) 12 13 (fontified t font-lock-face rjsx-tag-bracket-face) 13 17 (fontified t font-lock-face rjsx-tag) 17 18 (fontified t) 18 20 (fontified t font-lock-face rjsx-attr) 20 21 (fontified t) 21 27 (fontified t font-lock-face font-lock-string-face) 27 28 (fontified t) 28 31 (fontified t font-lock-face rjsx-attr) 31 32 (fontified t) 32 47 (fontified t font-lock-face font-lock-string-face) 47 48 (fontified t) 48 51 (fontified t font-lock-face rjsx-attr) 51 52 (fontified t) 52 70 (fontified t font-lock-face font-lock-string-face)) . 1433) (undo-tree-id219 . 70) (undo-tree-id220 . 70) (undo-tree-id221 . 70) (undo-tree-id222 . 70) (undo-tree-id223 . 70) (undo-tree-id224 . 70) (undo-tree-id225 . 70) (undo-tree-id226 . 70) (undo-tree-id227 . 70) (undo-tree-id228 . 70) (undo-tree-id229 . 70) (undo-tree-id230 . 70) (undo-tree-id231 . 70) (undo-tree-id232 . 70) (undo-tree-id233 . 70) (undo-tree-id234 . 70) (undo-tree-id235 . 70) (undo-tree-id236 . 70) (undo-tree-id237 . 70) (undo-tree-id238 . 70) (undo-tree-id239 . 70) (undo-tree-id240 . 70) (undo-tree-id241 . 70) (undo-tree-id242 . 70) (undo-tree-id243 . 70) (undo-tree-id244 . 70) (undo-tree-id245 . 70) (undo-tree-id246 . 70) (undo-tree-id247 . 70) (undo-tree-id248 . 70) (undo-tree-id249 . 70) (undo-tree-id250 . 70) (undo-tree-id251 . 70) (undo-tree-id252 . 70) (undo-tree-id253 . 70) (undo-tree-id254 . 70) (undo-tree-id255 . 70) (undo-tree-id256 . 70) (undo-tree-id257 . 70) (undo-tree-id258 . 70) (undo-tree-id259 . 70) (undo-tree-id260 . 70) (undo-tree-id261 . 70) (undo-tree-id262 . 70) (undo-tree-id263 . 70) (undo-tree-id264 . 70) (undo-tree-id265 . 70) (undo-tree-id266 . 70) (undo-tree-id267 . 70) (undo-tree-id268 . 70) (undo-tree-id269 . 70) (undo-tree-id270 . 70) (undo-tree-id271 . 70) (undo-tree-id272 . 70) (undo-tree-id273 . 70) (undo-tree-id274 . 70) (undo-tree-id275 . 70) (undo-tree-id276 . 70) (undo-tree-id277 . 70) (undo-tree-id278 . 70) (undo-tree-id279 . -70)) nil (23393 59658 471618 0) 0 nil]) ((#("
" 0 1 (fontified t font-lock-face rjsx-text syntax-table #13#)) . 1433) (undo-tree-id280 . 1) (undo-tree-id281 . 1) (undo-tree-id282 . 1) (undo-tree-id283 . 1) (undo-tree-id284 . 1) (undo-tree-id285 . 1) (undo-tree-id286 . 1) (undo-tree-id287 . 1) (undo-tree-id288 . 1) (undo-tree-id289 . 1) (undo-tree-id290 . 1) (undo-tree-id291 . 1) (undo-tree-id292 . 1) (undo-tree-id293 . 1) (undo-tree-id294 . 1) (undo-tree-id295 . 1) (undo-tree-id296 . 1) (undo-tree-id297 . 1) (undo-tree-id298 . 1) (undo-tree-id299 . 1) (undo-tree-id300 . 1) (undo-tree-id301 . 1) (undo-tree-id302 . 1) (undo-tree-id303 . 1) (undo-tree-id304 . 1) (undo-tree-id305 . 1) (undo-tree-id306 . 1) (undo-tree-id307 . 1) (undo-tree-id308 . 1) (undo-tree-id309 . 1) (undo-tree-id310 . 1) (undo-tree-id311 . 1) (undo-tree-id312 . 1) (undo-tree-id313 . 1) (undo-tree-id314 . 1) (undo-tree-id315 . 1) (undo-tree-id316 . 1) (undo-tree-id317 . 1) (undo-tree-id318 . 1) (undo-tree-id319 . 1) (undo-tree-id320 . 1) (undo-tree-id321 . 1) (undo-tree-id322 . 1) (undo-tree-id323 . 1) (undo-tree-id324 . 1) (undo-tree-id325 . 1) (undo-tree-id326 . 1) (undo-tree-id327 . 1) (undo-tree-id328 . 1) (undo-tree-id329 . 1) (undo-tree-id330 . 1) (undo-tree-id331 . 1) (undo-tree-id332 . 1) (undo-tree-id333 . 1) (undo-tree-id334 . 1) (undo-tree-id335 . 1) (undo-tree-id336 . 1) (undo-tree-id337 . 1) (undo-tree-id338 . -1)) nil (23393 59658 471702 0) 0 nil]) ((#("                  strokeWidth=\"0.5%\" stroke=\"#000\" fill=\"none\"/>" 0 18 (fontified t help-echo #15="syntax error" cursor-sensor-functions #1#) 18 21 (fontified t help-echo #15# cursor-sensor-functions #1#) 21 29 (fontified t help-echo #15# cursor-sensor-functions #1#) 29 30 (fontified t help-echo #15# cursor-sensor-functions #1#) 30 36 (fontified t help-echo #15# cursor-sensor-functions #1#) 36 37 (fontified t help-echo #15# cursor-sensor-functions #1#) 37 43 (fontified t help-echo #15# cursor-sensor-functions #1#) 43 44 (fontified t help-echo #15# cursor-sensor-functions #1#) 44 45 (fontified t help-echo #15# cursor-sensor-functions #1#) 45 50 (fontified t help-echo #15# cursor-sensor-functions #1#) 50 51 (fontified t help-echo #15# cursor-sensor-functions #1#) 51 55 (fontified t help-echo #15# cursor-sensor-functions #1#) 55 56 (fontified t help-echo #15# cursor-sensor-functions #1#) 56 62 (fontified t help-echo #15# cursor-sensor-functions #1#) 62 63 (rjsx-class self-closing-slash fontified t help-echo #15# cursor-sensor-functions #1#) 63 64 (fontified t help-echo #15# cursor-sensor-functions #1#)) . 1433) (undo-tree-id339 . -21) (undo-tree-id340 . 64) (undo-tree-id341 . 64) (undo-tree-id342 . 64) (undo-tree-id343 . 64) (undo-tree-id344 . 64) (undo-tree-id345 . 64) (undo-tree-id346 . 64) (undo-tree-id347 . 64) (undo-tree-id348 . 64) (undo-tree-id349 . 64) (undo-tree-id350 . 64) (undo-tree-id351 . 64) (undo-tree-id352 . 64) (undo-tree-id353 . 64) (undo-tree-id354 . 64) (undo-tree-id355 . 64) (undo-tree-id356 . 64) (undo-tree-id357 . 64) (undo-tree-id358 . 64) (undo-tree-id359 . 64) (undo-tree-id360 . 64) (undo-tree-id361 . -45) (undo-tree-id362 . 64) (undo-tree-id363 . 64) (undo-tree-id364 . 64) (undo-tree-id365 . 64) (undo-tree-id366 . 64) (undo-tree-id367 . 64) (undo-tree-id368 . 64) (undo-tree-id369 . 64) (undo-tree-id370 . 64) (undo-tree-id371 . 64) (undo-tree-id372 . 64) (undo-tree-id373 . 64) (undo-tree-id374 . 64) (undo-tree-id375 . 64) (undo-tree-id376 . 64) (undo-tree-id377 . 64) (undo-tree-id378 . 64) (undo-tree-id379 . 64) (undo-tree-id380 . 64) (undo-tree-id381 . 64) (undo-tree-id382 . 64) (undo-tree-id383 . 64) (undo-tree-id384 . 64) (undo-tree-id385 . 64) (undo-tree-id386 . 64) (undo-tree-id387 . 64) (undo-tree-id388 . 64) (undo-tree-id389 . 64) (undo-tree-id390 . 64) (undo-tree-id391 . 64) (undo-tree-id392 . 64) (undo-tree-id393 . 64) (undo-tree-id394 . 64) (undo-tree-id395 . -64) (undo-tree-id396 . 64) (undo-tree-id397 . 64) (undo-tree-id398 . -64)) nil (23393 59658 471770 0) 0 nil]) ((#("
" 0 1 (fontified t help-echo "syntax error" cursor-sensor-functions #1#)) . 1433) (undo-tree-id399 . -1) (undo-tree-id400 . 1) (undo-tree-id401 . 1) (undo-tree-id402 . 1) (undo-tree-id403 . 1) (undo-tree-id404 . 1) (undo-tree-id405 . 1) (undo-tree-id406 . 1) (undo-tree-id407 . 1) (undo-tree-id408 . 1) (undo-tree-id409 . 1) (undo-tree-id410 . 1) (undo-tree-id411 . 1) (undo-tree-id412 . 1) (undo-tree-id413 . 1) (undo-tree-id414 . 1) (undo-tree-id415 . 1) (undo-tree-id416 . 1) (undo-tree-id417 . 1) (undo-tree-id418 . 1) (undo-tree-id419 . 1) (undo-tree-id420 . 1) (undo-tree-id421 . -1) (undo-tree-id422 . 1) (undo-tree-id423 . 1) (undo-tree-id424 . 1) (undo-tree-id425 . 1) (undo-tree-id426 . 1) (undo-tree-id427 . 1) (undo-tree-id428 . 1) (undo-tree-id429 . 1) (undo-tree-id430 . 1) (undo-tree-id431 . 1) (undo-tree-id432 . 1) (undo-tree-id433 . 1) (undo-tree-id434 . 1) (undo-tree-id435 . 1) (undo-tree-id436 . 1) (undo-tree-id437 . 1) (undo-tree-id438 . 1) (undo-tree-id439 . 1) (undo-tree-id440 . 1) (undo-tree-id441 . 1) (undo-tree-id442 . 1) (undo-tree-id443 . 1) (undo-tree-id444 . 1) (undo-tree-id445 . 1) (undo-tree-id446 . 1) (undo-tree-id447 . 1) (undo-tree-id448 . 1) (undo-tree-id449 . 1) (undo-tree-id450 . 1) (undo-tree-id451 . 1) (undo-tree-id452 . 1) (undo-tree-id453 . 1) (undo-tree-id454 . 1) (undo-tree-id455 . -1)) nil (23393 59658 471839 0) 0 nil]) ((#("            <line id=\"str3\" y2$=\"[[_topFretY]]\" y1$=\"[[_bottomFretY]]\"" 0 12 (fontified t font-lock-face rjsx-text syntax-table #13#) 12 13 (fontified t font-lock-face rjsx-tag-bracket-face) 13 17 (fontified t font-lock-face rjsx-tag) 17 18 (fontified t) 18 20 (fontified t font-lock-face rjsx-attr) 20 21 (fontified t) 21 27 (fontified t font-lock-face font-lock-string-face) 27 28 (fontified t) 28 31 (fontified t font-lock-face rjsx-attr) 31 32 (fontified t) 32 47 (fontified t font-lock-face font-lock-string-face) 47 48 (fontified t) 48 51 (fontified t font-lock-face rjsx-attr) 51 52 (fontified t) 52 70 (fontified t font-lock-face font-lock-string-face)) . 1433) (undo-tree-id456 . 70) (undo-tree-id457 . 70) (undo-tree-id458 . 70) (undo-tree-id459 . 70) (undo-tree-id460 . 70) (undo-tree-id461 . 70) (undo-tree-id462 . 70) (undo-tree-id463 . 70) (undo-tree-id464 . 70) (undo-tree-id465 . 70) (undo-tree-id466 . 70) (undo-tree-id467 . 70) (undo-tree-id468 . 70) (undo-tree-id469 . 7) (undo-tree-id470 . 7) (undo-tree-id471 . -63) (undo-tree-id472 . -63) (undo-tree-id473 . 70) (undo-tree-id474 . 70) (undo-tree-id475 . 70) (undo-tree-id476 . 70) (undo-tree-id477 . 70) (undo-tree-id478 . 70) (undo-tree-id479 . 70) (undo-tree-id480 . 70) (undo-tree-id481 . 70) (undo-tree-id482 . 70) (undo-tree-id483 . 70) (undo-tree-id484 . 70) (undo-tree-id485 . 70) (undo-tree-id486 . 70) (undo-tree-id487 . 70) (undo-tree-id488 . 70) (undo-tree-id489 . 70) (undo-tree-id490 . 70) (undo-tree-id491 . 70) (undo-tree-id492 . 70) (undo-tree-id493 . 70) (undo-tree-id494 . 70) (undo-tree-id495 . 70) (undo-tree-id496 . 70) (undo-tree-id497 . 70) (undo-tree-id498 . 70) (undo-tree-id499 . 70) (undo-tree-id500 . 70) (undo-tree-id501 . 70) (undo-tree-id502 . 70) (undo-tree-id503 . 70) (undo-tree-id504 . 70) (undo-tree-id505 . 70) (undo-tree-id506 . 70) (undo-tree-id507 . 70) (undo-tree-id508 . 70) (undo-tree-id509 . 70) (undo-tree-id510 . -70)) nil (23393 59658 471929 0) 0 nil]) ((#("
" 0 1 (fontified t font-lock-face rjsx-text syntax-table #13#)) . 1433) (undo-tree-id511 . 1) (undo-tree-id512 . 1) (undo-tree-id513 . -1) (undo-tree-id514 . 1) (undo-tree-id515 . 1) (undo-tree-id516 . 1) (undo-tree-id517 . 1) (undo-tree-id518 . 1) (undo-tree-id519 . 1) (undo-tree-id520 . 1) (undo-tree-id521 . 1) (undo-tree-id522 . 1) (undo-tree-id523 . 1) (undo-tree-id524 . 1) (undo-tree-id525 . 1) (undo-tree-id526 . 1) (undo-tree-id527 . 1) (undo-tree-id528 . 1) (undo-tree-id529 . 1) (undo-tree-id530 . 1) (undo-tree-id531 . 1) (undo-tree-id532 . 1) (undo-tree-id533 . 1) (undo-tree-id534 . 1) (undo-tree-id535 . 1) (undo-tree-id536 . 1) (undo-tree-id537 . 1) (undo-tree-id538 . 1) (undo-tree-id539 . 1) (undo-tree-id540 . 1) (undo-tree-id541 . 1) (undo-tree-id542 . 1) (undo-tree-id543 . 1) (undo-tree-id544 . 1) (undo-tree-id545 . 1) (undo-tree-id546 . 1) (undo-tree-id547 . 1) (undo-tree-id548 . 1) (undo-tree-id549 . 1) (undo-tree-id550 . 1) (undo-tree-id551 . 1) (undo-tree-id552 . 1) (undo-tree-id553 . 1) (undo-tree-id554 . 1) (undo-tree-id555 . 1) (undo-tree-id556 . 1) (undo-tree-id557 . 1) (undo-tree-id558 . 1) (undo-tree-id559 . 1) (undo-tree-id560 . -1)) nil (23393 59658 471984 0) 0 nil]) ((#("                  strokeWidth=\"0.5%\" stroke=\"#000\" fill=\"none\"/>" 0 18 (fontified t help-echo #16="syntax error" cursor-sensor-functions #1#) 18 29 (fontified t help-echo #16# cursor-sensor-functions #1#) 29 30 (fontified t help-echo #16# cursor-sensor-functions #1#) 30 36 (fontified t help-echo #16# cursor-sensor-functions #1#) 36 37 (fontified t help-echo #16# cursor-sensor-functions #1#) 37 43 (fontified t help-echo #16# cursor-sensor-functions #1#) 43 44 (fontified t help-echo #16# cursor-sensor-functions #1#) 44 50 (fontified t help-echo #16# cursor-sensor-functions #1#) 50 51 (fontified t help-echo #16# cursor-sensor-functions #1#) 51 54 (fontified t help-echo #16# cursor-sensor-functions #1#) 54 55 (fontified t help-echo #16# cursor-sensor-functions #1#) 55 56 (fontified t help-echo #16# cursor-sensor-functions #1#) 56 62 (fontified t help-echo #16# cursor-sensor-functions #1#) 62 63 (rjsx-class self-closing-slash fontified t help-echo #16# cursor-sensor-functions #1#) 63 64 (fontified t help-echo #16# cursor-sensor-functions #1#)) . 1433) (undo-tree-id561 . 64) (undo-tree-id562 . 64) (undo-tree-id563 . 60) (undo-tree-id564 . 60) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . 64) (undo-tree-id568 . 64) (undo-tree-id569 . 64) (undo-tree-id570 . 64) (undo-tree-id571 . 64) (undo-tree-id572 . 64) (undo-tree-id573 . 64) (undo-tree-id574 . 64) (undo-tree-id575 . 64) (undo-tree-id576 . 1) (undo-tree-id577 . 1) (undo-tree-id578 . -63) (undo-tree-id579 . -63) (undo-tree-id580 . 64) (undo-tree-id581 . 64) (undo-tree-id582 . 64) (undo-tree-id583 . 64) (undo-tree-id584 . -54) (undo-tree-id585 . 64) (undo-tree-id586 . 64) (undo-tree-id587 . 64) (undo-tree-id588 . 64) (undo-tree-id589 . 64) (undo-tree-id590 . 64) (undo-tree-id591 . 64) (undo-tree-id592 . 64) (undo-tree-id593 . 64) (undo-tree-id594 . 64) (undo-tree-id595 . 64) (undo-tree-id596 . 64) (undo-tree-id597 . 64) (undo-tree-id598 . 64) (undo-tree-id599 . 64) (undo-tree-id600 . 64) (undo-tree-id601 . 64) (undo-tree-id602 . 64) (undo-tree-id603 . 64) (undo-tree-id604 . 64) (undo-tree-id605 . 64) (undo-tree-id606 . 64) (undo-tree-id607 . 64) (undo-tree-id608 . 64) (undo-tree-id609 . 64) (undo-tree-id610 . -64) (undo-tree-id611 . 64) (undo-tree-id612 . 64) (undo-tree-id613 . -64)) nil (23393 59658 472043 0) 0 nil]) ((#("
" 0 1 (fontified t help-echo "syntax error" cursor-sensor-functions #1#)) . 1433) (undo-tree-id614 . 1) (undo-tree-id615 . 1) (undo-tree-id616 . -1) (undo-tree-id617 . 1) (undo-tree-id618 . 1) (undo-tree-id619 . 1) (undo-tree-id620 . 1) (undo-tree-id621 . 1) (undo-tree-id622 . 1) (undo-tree-id623 . 1) (undo-tree-id624 . 1) (undo-tree-id625 . 1) (undo-tree-id626 . 1) (undo-tree-id627 . 1) (undo-tree-id628 . 1) (undo-tree-id629 . 1) (undo-tree-id630 . -1) (undo-tree-id631 . 1) (undo-tree-id632 . 1) (undo-tree-id633 . 1) (undo-tree-id634 . 1) (undo-tree-id635 . 1) (undo-tree-id636 . 1) (undo-tree-id637 . 1) (undo-tree-id638 . 1) (undo-tree-id639 . 1) (undo-tree-id640 . 1) (undo-tree-id641 . 1) (undo-tree-id642 . 1) (undo-tree-id643 . 1) (undo-tree-id644 . 1) (undo-tree-id645 . 1) (undo-tree-id646 . 1) (undo-tree-id647 . 1) (undo-tree-id648 . 1) (undo-tree-id649 . 1) (undo-tree-id650 . 1) (undo-tree-id651 . 1) (undo-tree-id652 . 1) (undo-tree-id653 . 1) (undo-tree-id654 . 1) (undo-tree-id655 . 1) (undo-tree-id656 . -1)) nil (23393 59658 472090 0) 0 nil]) ((#("            <line id=\"str4\" y2$=\"[[_bottomFretY]]\" y1$=\"[[_topFretY]]\"" 0 12 (fontified t font-lock-face rjsx-text syntax-table #13#) 12 13 (fontified t font-lock-face rjsx-tag-bracket-face) 13 17 (fontified t font-lock-face rjsx-tag) 17 18 (fontified t) 18 20 (fontified t font-lock-face rjsx-attr) 20 21 (fontified t) 21 27 (fontified t font-lock-face font-lock-string-face) 27 28 (fontified t) 28 31 (fontified t font-lock-face rjsx-attr) 31 32 (fontified t) 32 50 (fontified t font-lock-face font-lock-string-face) 50 51 (fontified t) 51 54 (fontified t font-lock-face rjsx-attr) 54 55 (fontified t) 55 70 (fontified t font-lock-face font-lock-string-face)) . 1433) (undo-tree-id657 . 70) (undo-tree-id658 . 70) (undo-tree-id659 . 70) (undo-tree-id660 . 70) (undo-tree-id661 . 70) (undo-tree-id662 . 70) (undo-tree-id663 . 70) (undo-tree-id664 . 70) (undo-tree-id665 . 70) (undo-tree-id666 . 70) (undo-tree-id667 . 70) (undo-tree-id668 . 70) (undo-tree-id669 . 70) (undo-tree-id670 . 70) (undo-tree-id671 . 70) (undo-tree-id672 . 70) (undo-tree-id673 . 70) (undo-tree-id674 . 70) (undo-tree-id675 . 70) (undo-tree-id676 . 70) (undo-tree-id677 . 70) (undo-tree-id678 . 70) (undo-tree-id679 . 70) (undo-tree-id680 . 70) (undo-tree-id681 . 70) (undo-tree-id682 . 70) (undo-tree-id683 . 70) (undo-tree-id684 . 70) (undo-tree-id685 . 70) (undo-tree-id686 . 70) (undo-tree-id687 . 70) (undo-tree-id688 . 70) (undo-tree-id689 . 70) (undo-tree-id690 . 70) (undo-tree-id691 . 70) (undo-tree-id692 . 70) (undo-tree-id693 . 70) (undo-tree-id694 . 70) (undo-tree-id695 . -70)) nil (23393 59658 472152 0) 0 nil]) ((#("
" 0 1 (fontified t font-lock-face rjsx-text syntax-table #13#)) . 1433) (undo-tree-id696 . 1) (undo-tree-id697 . 1) (undo-tree-id698 . 1) (undo-tree-id699 . 1) (undo-tree-id700 . 1) (undo-tree-id701 . 1) (undo-tree-id702 . 1) (undo-tree-id703 . 1) (undo-tree-id704 . 1) (undo-tree-id705 . 1) (undo-tree-id706 . 1) (undo-tree-id707 . 1) (undo-tree-id708 . 1) (undo-tree-id709 . 1) (undo-tree-id710 . 1) (undo-tree-id711 . 1) (undo-tree-id712 . 1) (undo-tree-id713 . 1) (undo-tree-id714 . 1) (undo-tree-id715 . 1) (undo-tree-id716 . 1) (undo-tree-id717 . 1) (undo-tree-id718 . 1) (undo-tree-id719 . 1) (undo-tree-id720 . 1) (undo-tree-id721 . 1) (undo-tree-id722 . 1) (undo-tree-id723 . 1) (undo-tree-id724 . 1) (undo-tree-id725 . 1) (undo-tree-id726 . 1) (undo-tree-id727 . 1) (undo-tree-id728 . 1) (undo-tree-id729 . 1) (undo-tree-id730 . 1) (undo-tree-id731 . 1) (undo-tree-id732 . -1)) nil (23393 59658 472234 0) 0 nil]) ((#("                  strokeWidth=\"0.5%\" stroke=\"#000\" fill=\"none\"/>" 0 18 (fontified t help-echo #17="syntax error" cursor-sensor-functions #1#) 18 29 (fontified t help-echo #17# cursor-sensor-functions #1#) 29 30 (fontified t help-echo #17# cursor-sensor-functions #1#) 30 36 (fontified t help-echo #17# cursor-sensor-functions #1#) 36 37 (fontified t help-echo #17# cursor-sensor-functions #1#) 37 43 (fontified t help-echo #17# cursor-sensor-functions #1#) 43 44 (fontified t help-echo #17# cursor-sensor-functions #1#) 44 50 (fontified t help-echo #17# cursor-sensor-functions #1#) 50 51 (fontified t help-echo #17# cursor-sensor-functions #1#) 51 55 (fontified t help-echo #17# cursor-sensor-functions #1#) 55 56 (fontified t help-echo #17# cursor-sensor-functions #1#) 56 62 (fontified t help-echo #17# cursor-sensor-functions #1#) 62 63 (rjsx-class self-closing-slash fontified t help-echo #17# cursor-sensor-functions #1#) 63 64 (fontified t help-echo #17# cursor-sensor-functions #1#)) . 1433) (undo-tree-id733 . 60) (undo-tree-id734 . 60) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . 64) (undo-tree-id738 . 64) (undo-tree-id739 . 64) (undo-tree-id740 . 64) (undo-tree-id741 . 64) (undo-tree-id742 . 64) (undo-tree-id743 . 64) (undo-tree-id744 . 1) (undo-tree-id745 . 1) (undo-tree-id746 . -63) (undo-tree-id747 . -63) (undo-tree-id748 . 1) (undo-tree-id749 . 1) (undo-tree-id750 . -63) (undo-tree-id751 . -63) (undo-tree-id752 . 64) (undo-tree-id753 . 64) (undo-tree-id754 . 64) (undo-tree-id755 . 64) (undo-tree-id756 . 64) (undo-tree-id757 . 64) (undo-tree-id758 . 64) (undo-tree-id759 . 64) (undo-tree-id760 . 64) (undo-tree-id761 . 64) (undo-tree-id762 . 64) (undo-tree-id763 . 64) (undo-tree-id764 . 64) (undo-tree-id765 . 64) (undo-tree-id766 . 64) (undo-tree-id767 . 64) (undo-tree-id768 . 64) (undo-tree-id769 . 64) (undo-tree-id770 . 64) (undo-tree-id771 . -64) (undo-tree-id772 . 64) (undo-tree-id773 . 64) (undo-tree-id774 . -64)) nil (23393 59658 472280 0) 0 nil]) ((#("
" 0 1 (fontified t help-echo "syntax error" cursor-sensor-functions #1#)) . 1433) (undo-tree-id775 . -1) (undo-tree-id776 . 1) (undo-tree-id777 . 1) (undo-tree-id778 . 1) (undo-tree-id779 . 1) (undo-tree-id780 . 1) (undo-tree-id781 . 1) (undo-tree-id782 . 1) (undo-tree-id783 . 1) (undo-tree-id784 . 1) (undo-tree-id785 . 1) (undo-tree-id786 . 1) (undo-tree-id787 . 1) (undo-tree-id788 . 1) (undo-tree-id789 . 1) (undo-tree-id790 . 1) (undo-tree-id791 . 1) (undo-tree-id792 . 1) (undo-tree-id793 . 1) (undo-tree-id794 . 1) (undo-tree-id795 . 1) (undo-tree-id796 . 1) (undo-tree-id797 . 1) (undo-tree-id798 . 1) (undo-tree-id799 . 1) (undo-tree-id800 . 1) (undo-tree-id801 . 1) (undo-tree-id802 . -1)) nil (23393 59658 472318 0) 0 nil]) ((#("            <line id=\"str5\" y1$=\"[[_topFretY]]\" y2$=\"[[_bottomFretY]]\"" 0 12 (fontified t font-lock-face rjsx-text syntax-table #13#) 12 13 (fontified t font-lock-face rjsx-tag-bracket-face) 13 17 (fontified t font-lock-face rjsx-tag) 17 18 (fontified t) 18 20 (fontified t font-lock-face rjsx-attr) 20 21 (fontified t) 21 27 (fontified t font-lock-face font-lock-string-face) 27 28 (fontified t) 28 31 (fontified t font-lock-face rjsx-attr) 31 32 (fontified t) 32 47 (fontified t font-lock-face font-lock-string-face) 47 48 (fontified t) 48 51 (fontified t font-lock-face rjsx-attr) 51 52 (fontified t) 52 70 (fontified t font-lock-face font-lock-string-face)) . 1433) (undo-tree-id803 . 70) (undo-tree-id804 . 70) (undo-tree-id805 . 70) (undo-tree-id806 . 70) (undo-tree-id807 . 70) (undo-tree-id808 . 70) (undo-tree-id809 . 70) (undo-tree-id810 . 70) (undo-tree-id811 . 70) (undo-tree-id812 . -48) (undo-tree-id813 . -48) (undo-tree-id814 . -48) (undo-tree-id815 . -48) (undo-tree-id816 . -48) (undo-tree-id817 . 70) (undo-tree-id818 . 70) (undo-tree-id819 . 70) (undo-tree-id820 . 70) (undo-tree-id821 . 70) (undo-tree-id822 . 70) (undo-tree-id823 . 70) (undo-tree-id824 . 70) (undo-tree-id825 . 70) (undo-tree-id826 . 70) (undo-tree-id827 . 70) (undo-tree-id828 . 70) (undo-tree-id829 . 70) (undo-tree-id830 . 70) (undo-tree-id831 . 70) (undo-tree-id832 . -70)) nil (23393 59658 472354 0) 0 nil]) ((#("
" 0 1 (fontified t font-lock-face rjsx-text syntax-table #13#)) . 1433) (undo-tree-id833 . 1) (undo-tree-id834 . 1) (undo-tree-id835 . 1) (undo-tree-id836 . 1) (undo-tree-id837 . 1) (undo-tree-id838 . 1) (undo-tree-id839 . 1) (undo-tree-id840 . 1) (undo-tree-id841 . 1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . 1) (undo-tree-id848 . 1) (undo-tree-id849 . 1) (undo-tree-id850 . 1) (undo-tree-id851 . 1) (undo-tree-id852 . 1) (undo-tree-id853 . 1) (undo-tree-id854 . 1) (undo-tree-id855 . 1) (undo-tree-id856 . 1) (undo-tree-id857 . 1) (undo-tree-id858 . 1) (undo-tree-id859 . 1) (undo-tree-id860 . -1)) nil (23393 59658 472387 0) 0 nil]) ((#("                  strokeWidth=\"0.5%\" stroke=\"#000\"/>" 0 18 (fontified t help-echo #18="syntax error" cursor-sensor-functions #1#) 18 29 (fontified t help-echo #18# cursor-sensor-functions #1#) 29 30 (fontified t help-echo #18# cursor-sensor-functions #1#) 30 36 (fontified t help-echo #18# cursor-sensor-functions #1#) 36 37 (fontified t help-echo #18# cursor-sensor-functions #1#) 37 43 (fontified t help-echo #18# cursor-sensor-functions #1#) 43 44 (fontified t help-echo #18# cursor-sensor-functions #1#) 44 50 (fontified t help-echo #18# cursor-sensor-functions #1#) 50 51 (rjsx-class self-closing-slash fontified t help-echo #18# cursor-sensor-functions #1#) 51 52 (fontified t help-echo #18# cursor-sensor-functions #1#)) . 1433) (undo-tree-id861 . 52) (undo-tree-id862 . 52) (undo-tree-id863 . 52) (undo-tree-id864 . 52) (undo-tree-id865 . 52) (undo-tree-id866 . -52) (undo-tree-id867 . -52) (undo-tree-id868 . 52) (undo-tree-id869 . 52) (undo-tree-id870 . 52) (undo-tree-id871 . 52) (undo-tree-id872 . 52) (undo-tree-id873 . 52) (undo-tree-id874 . 52) (undo-tree-id875 . 52) (undo-tree-id876 . 52) (undo-tree-id877 . 52) (undo-tree-id878 . 52) (undo-tree-id879 . -52) (undo-tree-id880 . 52) (undo-tree-id881 . 52) (undo-tree-id882 . -52)) nil (23393 59658 472411 0) 0 nil]) ((#("
" 0 1 (fontified t help-echo "syntax error" cursor-sensor-functions #1#)) . 1433) (undo-tree-id883 . 1) (undo-tree-id884 . 1) (undo-tree-id885 . 1) (undo-tree-id886 . 1) (undo-tree-id887 . 1) (undo-tree-id888 . 1) (undo-tree-id889 . 1) (undo-tree-id890 . 1) (undo-tree-id891 . 1) (undo-tree-id892 . 1) (undo-tree-id893 . 1) (undo-tree-id894 . 1) (undo-tree-id895 . 1) (undo-tree-id896 . 1) (undo-tree-id897 . 1) (undo-tree-id898 . 1) (undo-tree-id899 . -1)) nil (23393 59658 472430 0) 0 nil]) ((#("                  x2$=\"[[_leftStringX]]\" x1$=\"[[_leftStringX]]\"" 0 5 (fontified t help-echo #19="syntax error" cursor-sensor-functions #1#) 5 18 (fontified t help-echo #19# cursor-sensor-functions #1#) 18 21 (fontified t help-echo #19# cursor-sensor-functions #1#) 21 22 (fontified t help-echo #19# cursor-sensor-functions #1#) 22 40 (fontified t help-echo #19# cursor-sensor-functions #1#) 40 41 (fontified t help-echo #19# cursor-sensor-functions #1#) 41 44 (fontified t help-echo #19# cursor-sensor-functions #1#) 44 45 (fontified t help-echo #19# cursor-sensor-functions #1#) 45 63 (fontified t help-echo #19# cursor-sensor-functions #1#)) . 1433) (undo-tree-id900 . -63) (undo-tree-id901 . -63) (undo-tree-id902 . -63) (undo-tree-id903 . -63) (undo-tree-id904 . -63) (undo-tree-id905 . -63) (undo-tree-id906 . -5) (undo-tree-id907 . 63) (undo-tree-id908 . 63) (undo-tree-id909 . 63) (undo-tree-id910 . 63) (undo-tree-id911 . 63) (undo-tree-id912 . 63) (undo-tree-id913 . 63) (undo-tree-id914 . -63)) nil (23393 59658 472450 0) 0 nil]) ((#("
" 0 1 (fontified t help-echo "syntax error" cursor-sensor-functions #1#)) . 1433) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . 1) (undo-tree-id918 . 1) (undo-tree-id919 . 1) (undo-tree-id920 . 1) (undo-tree-id921 . 1) (undo-tree-id922 . -1)) nil (23393 59658 472460 0) 0 nil]) ((#("            <line id=\"str6\" y1$=\"[[_topFretY]]\" y2$=\"[[_bottomFretY]]\"" 0 12 (font-lock-face rjsx-text syntax-table #13# fontified t) 12 13 (font-lock-face rjsx-tag-bracket-face fontified t) 13 17 (font-lock-face rjsx-tag fontified t) 17 18 (fontified t) 18 20 (font-lock-face rjsx-attr fontified t) 20 21 (fontified t) 21 27 (font-lock-face font-lock-string-face fontified t) 27 28 (fontified t) 28 31 (font-lock-face rjsx-attr fontified t) 31 32 (fontified t) 32 47 (font-lock-face font-lock-string-face fontified t) 47 48 (fontified t) 48 51 (font-lock-face rjsx-attr fontified t) 51 52 (fontified t) 52 70 (font-lock-face font-lock-string-face fontified t)) . 1433) (undo-tree-id923 . -52) (undo-tree-id924 . 35) (undo-tree-id925 . -35) (undo-tree-id926 . 70) (undo-tree-id927 . 35) (undo-tree-id928 . -70) (t 23393 59613 666570 168000)) nil (23393 59658 472471 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 505) (undo-tree-id24 . 1) (undo-tree-id25 . 1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . 1) (undo-tree-id29 . 1) (undo-tree-id30 . 1) (undo-tree-id31 . 1) (undo-tree-id32 . 1) (undo-tree-id33 . 1) (undo-tree-id34 . 1) (undo-tree-id35 . 1) (undo-tree-id36 . 1) (undo-tree-id37 . 1) (undo-tree-id38 . 1) (undo-tree-id39 . 1) (undo-tree-id40 . 1) (undo-tree-id41 . -1)) nil (23393 59613 651050 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 505) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . 1) (undo-tree-id60 . 1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . 1) (undo-tree-id65 . 1) (undo-tree-id66 . 1) (undo-tree-id67 . -1)) nil (23393 59613 651094 0) 0 nil]) ((#("    debugger;" 0 4 (fontified t) 4 12 (fontified t font-lock-face font-lock-keyword-face) 12 13 (fontified t)) . 505) (undo-tree-id68 . 9) (undo-tree-id69 . 9) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . 13) (undo-tree-id73 . -13) (t 23393 59601 174292 654000)) nil (23393 59613 651110 0) 0 nil]) ((655 . 660) (#(" " 0 1 (fontified t)) . 655) (undo-tree-id0 . -1) (undo-tree-id1 . 1) (undo-tree-id2 . 1) (undo-tree-id3 . 1) (undo-tree-id4 . 1) (undo-tree-id5 . 1) (undo-tree-id6 . 1) (undo-tree-id7 . 1) (undo-tree-id8 . 1) (undo-tree-id9 . 1) (undo-tree-id10 . 1) (undo-tree-id11 . 1) (undo-tree-id12 . 1) (undo-tree-id13 . 1) (undo-tree-id14 . 1) (undo-tree-id15 . 1) (undo-tree-id16 . 1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 656 (t 23393 59596 214642 307000)) nil (23393 59601 159220 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -659) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . 1) (undo-tree-id11 . -1) 660) nil (23393 59596 199455 0) 0 nil]) ((659 . 660)) nil (23393 59596 199461 0) 0 nil]) ((#("   " 0 3 (fontified t)) . -656) (undo-tree-id12 . -3) 655) nil (23393 59596 199465 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -655) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 656 (t 23393 59575 602243 745000)) nil (23393 59596 199484 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 656) (undo-tree-id0 . 1) (undo-tree-id1 . 1) (undo-tree-id2 . 1) (undo-tree-id3 . 1) (undo-tree-id4 . 1) (undo-tree-id5 . 1) (undo-tree-id6 . 1) (undo-tree-id7 . -1) (t 23390 2631 689237 655000)) nil (23393 59575 585122 0) 0 nil]) nil nil (23393 59575 585130 0) 0 nil] #20# 27413 217 nil]